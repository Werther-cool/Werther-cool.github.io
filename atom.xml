<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Werther的博客</title>
  <subtitle>233333</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-22T12:23:20.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Werther</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[layout]</title>
    <link href="http://yoursite.com/2017/02/22/layout/"/>
    <id>http://yoursite.com/2017/02/22/layout/</id>
    <published>2017-02-22T12:21:04.000Z</published>
    <updated>2017-02-22T12:23:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/02/22/layout/saber.jpg" alt="saber-w600"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/02/22/layout/saber.jpg&quot; alt=&quot;saber-w600&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo优化插件</title>
    <link href="http://yoursite.com/2017/02/20/Hexo%E4%BC%98%E5%8C%96%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/02/20/Hexo优化插件/</id>
    <published>2017-02-20T08:34:29.000Z</published>
    <updated>2017-02-20T08:37:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><ul></ul></p>
<p><li>1.安装Hexo</li></p>
<p><li>2.部署Hexo</li></p>
<p><li>3.Hexo命令</li></p>
<p><li>4.一些报错处理</li></p>
<p><li>5.博客管理</li></p>
<p><li>6.插件（RSS、Sitemap）</li></p>
<p><li>7.评论设置</li></p>
<p><li>8.404页面</li></p>
<p><li>9.统计</li></p>
<p><li>10.更新</li></p>
<p><li>11.总结</li></p>
<p><li>12.参考引用</li></p>
<p><li>13.搭建博客相关网站</li><br></p>
<p></p><h3>简述</h3><p></p>
<p>本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌。</p><br><h4>1.安装Hexo</h4><br><pre><code> $ npm install -g hexo</code></pre><br><h6>坑1</h6><br><p>这里可能安装失败，可能权限不够，在命令前加<code>sudo</code></p><br><pre><code> $ sudo npm install -g hexo</code></pre><br><h4>2.部署Hexo</h4><br><pre><code> $ hexo init</code></pre><br><h6>注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。</h6><br><p>执行命令生，会在当前命令的路径下，生成以下文件：</p><br><pre><code>    .<br>    ├── .deploy<br>    ├── public<br>    ├── scaffolds<br>    ├── scripts<br>    ├── source<br>    |   ├── _drafts<br>    |   └── _posts<br>    ├── themes<br>    ├── _config.yml<br>    └── package.json</code></pre><br><ul><br><li>.deploy：执行hexo deploy命令部署到GitHub上的内容目录</li><br><li>public：执行hexo generate命令，输出的静态网页内容目录</li><br><li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li><br><li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li><br><li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</li><br><li>_drafts：草稿文章</li><br><li>_posts：发布文章</li><br><li>themes：主题文件目录</li><br><li>_config.yml：全局配置文件，大多数的设置都在这里</li><br><li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li><br></ul><br><h4>3.Hexo命令</h4><br><p>Hexo下，通过 <code>_config.yml</code> 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。</p><br><ul><br><li>全局设置</li><br></ul><br><p>在你博客目录下有一个文件名<code>_config.yml</code>，打开可以配置信息。</p><br><ul><br><li>局部页面</li><br></ul><br><p>在你博客目录下 <code>\themes\你使用的主题_config.yml</code> </p><br><ul><br><li>写博客相关命令</li><br></ul><br><pre><code>    Hexo常用命令：<br><br>    hexo new “postName”       #新建文章<br>    hexo new page “pageName”  #新建页面<br>    hexo generate             #生成静态页面至public目录<br>    hexo server               #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>    hexo deploy               #将.deploy目录部署到GitHub</code></pre><br><p>当然，如果每次输入那么长命令，那么一定想到用<strong>简写</strong>：</p><br><pre><code>    hexo n == hexo new<br>    hexo g == hexo generate<br>    hexo s == hexo server<br>    hexo d == hexo deploy</code></pre><br><p>其它的，还可以<strong>复合命令</strong>：</p><br><pre><code>    hexo deploy -g<br>    hexo server -g</code></pre><br><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧</p><br><pre><code>    $ hexo clean</code></pre><br><p>当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。</p><br><blockquote><p>注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？<br>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p></blockquote><br><h3>4.一些报错处理</h3><br><h6>坑2</h6><br><ul><br><li><br><p>一</p><br><blockquote><p>ERROR Plugin load failed: hexo-server<br>原因：<br>Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.<br>解决方法，执行命令：<br>sudo npm install hexo-server</p></blockquote><br></li><br><li><br><p>二</p><br><blockquote><p>执行命令hexo server，有如下提示：<br>Usage: hexo<br>….<br>原因：<br>我认为是没有生成本地服务<br>解决方法，执行命令：<br>npm install hexo-server –save<br>提示：hexo-server@0.1.2 node_modules/hexo-server</p></blockquote><br></li><br></ul><br><ul><br><li>三<blockquote><p>白板和Cannot GET / 几个字<br>原因:<br>由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p></blockquote><br></li><br></ul><br><pre><code>    npm install hexo-renderer-ejs –save<br>    npm install hexo-renderer-stylus –save<br>    npm install hexo-renderer-marked –save<br>    这个时候再重新生成静态文件，命令：<br>    hexo generate （或hexo g）<br>    启动本地服务器：<br>    hexo server （或hexo s）</code></pre><br><h4>5.博客管理</h4><br><p>上面命令中，其实生成文章，可以直接把写好的文章插入到目录<code>/_posts</code> 下面，后缀为.MD就行，在文章头部固定格式：</p><br><pre><code>    title: Mac提高使用效率的一些方法   #文章的标题，这个才是显示的文章标题，其实文件名不影响<br>    date: 2015-09-01 20:33:26      #用命令会自动生成，也可以自己写，所以文章时间可以改<br>    categories: technology         #文章的分类，这个可以自己定义<br>    tags: [Mac,效率,快捷方式]        #tag，为文章添加标签，方便搜索<br>    —</code></pre><br><p>当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用<a href="https://en.wikipedia.org/wiki/YAML" target="_blank">AML</a>来写的。</p><br><pre><code>    tags:<br>    - tag1<br>    - tag2</code></pre><br><p>如果在博客文章列表中，不想全文显示，可以增加 &lt;!–more–&gt;, 后面的内容就不会显示在列表。</p><br><pre><code>     &lt;!–more–&gt;</code></pre><br><h4>6.插件</h4><br><ul><br><li><br><p>安装插件</p><br><pre><code>  $ npm install &lt;plugin-name&gt; –save</code></pre><br></li><br><li><br><p>添加RSS</p><br><pre><code>  npm install hexo-generator-feed</code></pre><br><p>然后，到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！(楼主就是在这里被坑了次)<br>解决方法：</p><br><pre><code>  $ npm install hexo-generator-feed –save</code></pre><br><p>这个命令来自<a href="https://www.npmjs.com/package/hexo-generator-feed" target="_blank">hexo-generator-feed</a></p><br><pre><code>  Install<br>     $ npm install hexo-generator-feed –save<br>   Hexo 3: 1.x<br>   Hexo 2: 0.x<br>  Options<br>     You can configure this plugin in _config.yml.<br><br>    feed:<br>       type: atom<br>       path: atom.xml<br>       limit: 20<br><br>      type - Feed type. (atom/rss2)<br>      path - Feed path. (Default: atom.xml/rss2.xml)<br>      limit - Maximum number of posts in the feed (Use 0 or false to show all posts)</code></pre><br></li><br></ul><br><p>其中可以选择：<br>然后在 Hexo 根目录下的 _config.yml 里配置一下</p><br><pre><code>    feed:<br>        type: atom<br>        path: atom.xml<br>        limit: 20<br>    #type 表示类型, 是 atom 还是 rss2.<br>    #path 表示 Feed 路径<br>    #limit 最多多少篇最近文章</code></pre><br><p>最后，在 <code>hexo generate</code>之后，会发现public文件夹下多了atom.xml！</p><br><p>例如要订阅我的blog只要输入<code>ihtc.cc/atom</code>就可以搜寻到啦！</p><br><ul><br><li>添加Sitemap<blockquote><p>Sitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。</p></blockquote><br></li><br></ul><br><pre><code>    $ npm install hexo-generator-sitemap –save</code></pre><br><p>这个命令来自<a href="https://www.npmjs.com/package/hexo-generator-sitemap" target="_blank">hexo-generator-sitemap</a></p><br><pre><code>    Install<br>        $ npm install hexo-generator-sitemap –save<br><br>        Hexo 3: 1.x<br>        Hexo 2: 0.x<br>    Options<br>        You can configure this plugin in _config.yml.<br><br>        sitemap:<br>            path: sitemap.xml<br>        path - Sitemap path. (Default: sitemap.xml)</code></pre><br><p>同样可以选择：<br>在 Hexo 根目录下的 _config.yml 里配置一下</p><br><pre><code>        sitemap:<br>           path: sitemap.xml<br>           #path 表示 Sitemap 的路径. 默认为 sitemap.xml.</code></pre><br><p>对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的. 安装</p><br><pre><code>        $ npm install hexo-generator-baidu-sitemap –save</code></pre><br><p>然后在 Hexo 根目录下的 _config.yml 里配置一下</p><br><pre><code>       baidusitemap:<br>            path: baidusitemap.xml</code></pre><br><p>为了博客有更好的展示率, 最好的方式是通过搜索引擎, 提交 Sitemap文件是一个方式，具体可参考：</p><br><ul><br><li><a href="http://lukang.me/2015/optimization-of-hexo-2.html" target="_blank">Hexo 优化与定制(二) | Kang Lu’s Blog</a></li><br><li><br><p><a href="http://fionat.github.io/blog/2013/10/23/sitemap/" target="_blank">｜Hexo优化｜如何向google提交sitemap（详细） | Fiona’s Blog</a></p><br></li><br><li><br><p>其它插件<br><a href="https://github.com/hexojs/hexo/wiki/Plugins" target="_blank">Plugins · hexojs/hexo</a></p><br></li><br></ul><br><h4>7.评论设置</h4><br><p>在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的<a href="http://duoshuo.com" target="_blank">多说</a>评论系统。</p><br><p>需要说明的是 <code>short_name:</code>字段，这个字段为你多说填写的站点名字，比如我的域名：ihtcboy.duoshuo.com，那么我的short_name:”ihtcboy”</p><br><h4>8.404页面</h4><br><blockquote><p>GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。<br>其实，404页面可以做更多有意义的事，来做个404公益项目吧。</p></blockquote><br><p>腾讯公益 404.html :</p><br><pre><code>    &lt;html&gt;<br>    &lt;head&gt;<br>        &lt;meta charset=”UTF-8”&gt;<br>        &lt;title&gt;404&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>    &lt;br&gt;&lt;!–<br>    &lt;!DOCTYPE HTML&gt;<br>    &lt;html&gt;<br>    &lt;head&gt;<br>        &lt;meta charset=”UTF-8” /&gt;<br>        &lt;title&gt;公益404 | 不如&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>    #404 Not found By Bruce<br>    &lt;h1&gt;404 Page Not Found&lt;/h1&gt;<br>    –&gt;&lt;br&gt;&lt;script type=”text/javascript” src=”<a href="http://www.qq.com/404/search_children.js" target="_blank" rel="external">http://www.qq.com/404/search_children.js</a>“ charset=”utf-8”&gt;&lt;/script&gt;&lt;br&gt;&lt;!–<br>    公益404介接入地址<br>    益云公益404 <a href="http://yibo.iyiyun.com/Index/web404" target="_blank" rel="external">http://yibo.iyiyun.com/Index/web404</a><br>    腾讯公益404 <a href="http://www.qq.com/404" target="_blank" rel="external">http://www.qq.com/404</a><br>    失蹤兒童少年資料管理中心404 <a href="http://404page.missingkids.org.tw" target="_blank" rel="external">http://404page.missingkids.org.tw</a><br>    –&gt;<br>    &lt;br&gt;<br>    &lt;/body&gt;<br>    &lt;/html&gt;</code></pre><br><p>复制上面代码，贴粘到目录下新建的404.html即可！</p><br><h4>9.统计</h4><br><blockquote><p>因Google Analytics偶尔被墙，故国内用百度统计</p></blockquote><br><p>最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：<a href="http://service.ibruce.info" target="_blank">不蒜子</a><br>本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考不蒜子文档中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。</p><br><ul><br><li><a href="http://ibruce.info/2013/12/22/count-views-of-hexo/" target="_blank">为hexo博客添加访问次数统计功能 | 不如</a></li><br></ul><br><h4>10.更新</h4><br><ul><br><li>更新hexo：<pre><code>  npm update -g hexo</code></pre><br></li><br><li>更新主题：<pre><code>  cd themes/你的主题<br>  git pull</code></pre><br></li><br><li>更新插件：<pre><code>  npm update</code></pre><br></li><br></ul><br><h4>11.总结</h4><br><p>本文主要是解释了自己搭建过程中遇到的问题，还有综合了其它Hexo教程的总结，还有图床、搜索、CDN加速等内容没有说到，大家用到可以自行百度谷歌！</p><br><h3>12.参考引用</h3><br><p><a href="http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/" target="_blank">如何搭建一个独立博客——简明Github Pages与Hexo教程</a><br><a href="http://zipperary.com/2013/05/28/hexo-guide-1/" target="_blank">hexo系列教程：（一）hexo介绍 | Zippera’s blog</a><br><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank">hexo系列教程：（二）搭建hexo博客 | Zippera’s blog</a><br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank">hexo你的博客 | 不如</a><br><a href="http://yangjian.me/workspace/building-blog-with-hexo/" target="_blank">使用hexo搭建博客 | Alimon’s Blog</a><br><a href="http://blog.sunnyxx.com/2014/02/27/hexo_startup/" target="_blank">hexo边搭边记 | sunnyxx的技术博客</a><br><a href="http://code.wileam.com/build-a-hexo-blog-and-optimize/" target="_blank">hexo搭建静态博客以及优化 | Joanna’s coding blog</a><br><a href="http://www.jianshu.com/p/465830080ea9/comments/550752#comment-550752" target="_blank">HEXO+Github,搭建属于自己的博客 - 简书</a><br><a href="http://code.kpman.cc/2013/05/08/%E5%9C%A8hexo%E8%87%AA%E8%A8%82rss/" target="_blank">在hexo自訂rss | kpman | code</a><br><a href="http://michaelhsu.tw/2013/05/05/rssatom-sitemap-for-seo/" target="_blank">RSS/Atom、Sitemap for SEO | Michael Hsu.tw</a><br><a href="http://lukang.me/2015/optimization-of-hexo-2.html" target="_blank">Hexo 优化与定制(二) | Kang Lu’s Blog</a><br><a href="http://ijiaober.github.io/categories/hexo/" target="_blank">Hexo | { GoonX }</a><br><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank">不蒜子 | 不如</a></p>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;1.安装Hexo&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;2.部署Hexo&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;3.Hexo命令&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;4.一些报错处理&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;5.博客管理&lt;/li&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My Gallery</title>
    <link href="http://yoursite.com/2017/02/20/My-Gallery/"/>
    <id>http://yoursite.com/2017/02/20/My-Gallery/</id>
    <published>2017-02-20T07:57:33.000Z</published>
    <updated>2017-02-20T08:02:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/02/20/My-Gallery/saber.jpg" alt="saber"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/02/20/My-Gallery/saber.jpg&quot; alt=&quot;saber&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试2</title>
    <link href="http://yoursite.com/2017/02/20/%E6%B5%8B%E8%AF%952/"/>
    <id>http://yoursite.com/2017/02/20/测试2/</id>
    <published>2017-02-20T07:56:27.000Z</published>
    <updated>2017-02-20T07:56:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>终于搭建完了</title>
    <link href="http://yoursite.com/2017/02/19/%E7%BB%88%E4%BA%8E%E6%90%AD%E5%BB%BA%E5%AE%8C%E4%BA%86/"/>
    <id>http://yoursite.com/2017/02/19/终于搭建完了/</id>
    <published>2017-02-19T11:22:23.000Z</published>
    <updated>2017-02-19T11:22:23.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/02/19/hello-world/"/>
    <id>http://yoursite.com/2017/02/19/hello-world/</id>
    <published>2017-02-19T10:55:15.000Z</published>
    <updated>2017-02-19T10:55:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Object Oriented Programing</title>
    <link href="http://yoursite.com/2016/02/19/Object%20Oriented%20Programing/"/>
    <id>http://yoursite.com/2016/02/19/Object Oriented Programing/</id>
    <published>2016-02-19T11:22:23.000Z</published>
    <updated>2017-02-20T08:26:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h2><ul>
<li>throw “抛出异常”<br>  <code>throw new TypeError(&#39;&quot;this&quot; is null or not defined&#39;);</code></li>
<li><p>“use strict” </p>
<ul>
<li>全部小写,整个字符串是个字符,不能随便添加空格,可以单引号</li>
<li>作用域,在函数内部(顶部), <code>&lt;script&gt;</code> 标签内(相互独立)</li>
</ul>
</li>
<li><p>反括号  var str =  <code>字符串</code> 处理参数过长</p>
</li>
<li><p>== 判断值 === 判断值和类型  若为引用类型, 则判断 地址</p>
</li>
<li><p>with<br>with(对象){对象的作用域,this指向window}省略前缀<br>添加属性,会添加到window上</p>
</li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>私有变量和函数</strong></p>
<pre><code>定义在构造函数内部而被this对象的变量,在外部无法访问到的变量和函数
</code></pre><p><strong>公有变量和方法</strong></p>
<pre><code>对外暴露接口,可以通过构造函数对象创建的对象访问的属性和方法
</code></pre><p><strong>代码示例</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">type,number</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;   <span class="comment">//公共的属性</span></div><div class="line">        <span class="keyword">this</span>.number = number;</div><div class="line">        <span class="keyword">var</span> city = <span class="string">"广州"</span>;                <span class="comment">//私有变量</span></div><div class="line">        <span class="keyword">var</span> getNumber = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;       <span class="comment">//私有函数</span></div><div class="line">            <span class="keyword">return</span> number;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> getType = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> type;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">//能够访问私有变量和函数的方法 --- 特权方法</span></div><div class="line">        <span class="keyword">this</span>.getDescription = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(getNumber() + getType() + city);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">"汽车"</span>,<span class="string">"201718"</span>);</div><div class="line">    car.getDescription();</div></pre></td></tr></table></figure>
<ul>
<li>prototype (object类型) 是function自带的属性,有一个constructor属性指向该函数,object没有该属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> Object.property中的属性和方法</div><div class="line"></div><div class="line">① constructor 指向原型相关联的构造函数，为Object</div><div class="line">② hasOwnProperty 判断对象中是否拥有某个实例属性(不包括原型链上面的属性)</div><div class="line">    - hasOwnProperty</div><div class="line">    - 对象.hasOwnProperty(&quot;属性&quot;)</div><div class="line">    - 类似in,但是原型对象中的属性不算</div><div class="line">③ isPrototypeOf  校验某个对象是否是指定对象的原型对象(整条原型链)</div><div class="line">④ propertyIsEnumerable 属性是否存在且可枚举(使用for循环可以遍历,即目标属性能否在for循环中显示出来)</div><div class="line">⑤ toString() 返回一个描述目标对象的字符串,对象则返回[object object]</div><div class="line">    Object.prototype.toString.call(被检测的参数如 arr) [object Array]</div><div class="line">   toString(参数) 参数出可以传入一个用于进制数的参数,该参数的默认值为10(主要针对Number类型有效)</div><div class="line">⑥ toLocaleString 同toString,但是会做一些本地化的处理。</div><div class="line">⑦ valueOf() 返回指定对象的原始值</div><div class="line">             如果该对象有 基本数据类型的值,则返回该值,</div><div class="line">             如果没有则返回this本身。</div><div class="line">             Date对象调用该方法会返回一个时间戳。</div></pre></td></tr></table></figure>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul>
<li><p>Object.getPrototypeOf(object) 返回obj的原型  ==&gt; 构造函数的原型属性</p>
</li>
<li><p>break 停止循环 continue 跳过当前 进行下次</p>
</li>
<li><p>delete 关键字</p>
<ul>
<li>删除对象的属性</li>
<li>删除没用var 声明的对象</li>
<li>delete 属性屏蔽 -&gt;访问原型中的属性.就相当于 实例.prototype.属性</li>
</ul>
</li>
<li><p>in关键字 </p>
<ul>
<li>在判断属性是否存在于对象中时,key 是字符串,需要加双引号</li>
<li>in 操作array数组时 操作的是索引值 (1 in arrar) </li>
<li>原型对象上的属性也会被枚举</li>
</ul>
</li>
<li><p>instanceOf </p>
<ul>
<li>对象  instanceOf  构造函数/具体类型   </li>
<li>实例在原型链上就是,对应构造函数的实例 </li>
</ul>
</li>
<li><p>对象.constructor</p>
<ul>
<li>(实例的constructor 来自原型对象的constructor 共同指向 构造函数)</li>
<li>constructor 一定指向构造函数</li>
</ul>
</li>
</ul>
<ul>
<li><p>修改原型中的属性 </p>
<ul>
<li>对象.属性 无法操作原型对象中的属性和方法</li>
<li>对象.属性(对象).属性 可以修改原型对象的属性(对象)的属性</li>
</ul>
</li>
<li><p>null 变量的值不会为null,除非手动设置</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 函数参数是按值传递 </div><div class="line">/*如果形参名称 和 全局变量一样时 就近原则 选择num 为形参*/</div><div class="line">var num = 10;</div><div class="line">function fn(num) &#123;</div><div class="line">    num =5;          // 此时修改的为形参, 而全局变量num 没有被修改</div><div class="line">    console.log(num); //num = 5</div><div class="line">&#125;</div><div class="line">fn(num);</div><div class="line">console.log(num);  // num =10</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    num =<span class="number">5</span>;         <span class="comment">// 此时num 为 全局变量 被修改</span></div><div class="line">    <span class="built_in">console</span>.log(n); <span class="comment">//num = 5</span></div><div class="line">&#125;</div><div class="line">fn(num);</div><div class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// num = 5</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>Fun 和 Obj</p>
<p><img src="/2016/02/19/Object Oriented Programing/14869708097651/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-01-29%20%E4%B8%8A%E5%8D%889.08.22.png" alt="屏幕快照 2017-01-29 上午9.08.22-w600"></p>
<p><img src="/2016/02/19/Object Oriented Programing/14869708097651/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-01-29%20%E4%B8%8A%E5%8D%888.58.36.png" alt="屏幕快照 2017-01-29 上午8.58.36-w600"></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul>
<li>实现 o 继承 tmp 对象 (ECMA5方法)<ul>
<li><code>var o = Object.creat(tmp)</code> </li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;name =<span class="string">"名称"</span>&#125;;</div><div class="line"><span class="keyword">var</span> o = &#123;&#125;</div><div class="line"><span class="comment">// 单个实例实现继承</span></div><div class="line">o.__proto__ = obj;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.name = <span class="string">"名字"</span>;     <span class="comment">//先创建包装类型,执行完后,对象销毁</span></div><div class="line"><span class="built_in">console</span>.log(str.name)   <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<ol>
<li>属性 通过call传递  B继承了A的属性</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function B&#123;</div><div class="line">   A.call(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>遍历传递方法 (若直接赋值传递,是引用了相同的内存对象)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var i in A.prototype)&#123;</div><div class="line">    B.prototype[i]=A.prototype[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>封闭空间</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//1</div><div class="line">(function () &#123;</div><div class="line"></div><div class="line">&#125;)();</div><div class="line">//</div><div class="line">(function () &#123;</div><div class="line"></div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<ul>
<li><p>caller 返回函数调用者</p>
<ul>
<li>场景 主要用于察看函数本身被哪个函数调用</li>
</ul>
</li>
<li><p>callee</p>
<ul>
<li>返回正被执行的 Function 对象，也就是所指定的 Function 对象的正文.</li>
<li>callee是arguments 的一个属性成员，它表示对函数对象本身的引用</li>
<li>arguments.callee.length可以获取实参参数</li>
</ul>
</li>
</ul>
<ul>
<li><p>call </p>
<ul>
<li>供爷法则:<figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- 作用:将 &quot;爷&quot; 中的this指针 改为 &quot;你&quot;</div><div class="line">- 1 将伪数组</div><div class="line">(document.getbytagname()  arguments $(&apos;.class&apos;))</div><div class="line">转换成真数组</div><div class="line">`Array.prototype.slice.call(fackArray);`</div><div class="line">- 2 判断类型:  </div><div class="line">  ```tostring.call(123)     [object number]</div></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>apply</p>
<ul>
<li>和call一样,参数是数组</li>
<li>apply应用 ,保留this指向</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//因为document.getElementById方法的内部实现中需要使用到this,这个this本来期望指向的是document对象</span></div><div class="line"><span class="comment">//当我们以document.getElementById来调用的时候,内部的this指向document对象</span></div><div class="line"><span class="comment">//但是当我们以getId的方式调用的时候,内部的this指向的是window对象(因为我们以普通的方式进行调用)</span></div><div class="line"></div><div class="line"> <span class="comment">//借用apply来修正this</span></div><div class="line"><span class="built_in">document</span>.getElementById = (<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> func.apply(<span class="built_in">document</span>,<span class="built_in">arguments</span>);</div><div class="line">   &#125;</div><div class="line">&#125;)(<span class="built_in">document</span>.getElementById);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById;</div><div class="line"><span class="keyword">var</span> div = getId(<span class="string">'demo'</span>);        <span class="comment">//会报错?</span></div><div class="line"><span class="built_in">console</span>.log(div);</div></pre></td></tr></table></figure>
<h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型:"></a>判断类型:</h3><ul>
<li>tostring.call(123)     [object number]</li>
<li>[]是不是Array的一个实例</li>
<li><code>[] instanceof Array</code></li>
<li><code>[].constructor === Array</code></li>
<li>typeof (关键字) 返回值为字符串<br> <code>if(typeof fn == &#39;Function&#39;){}</code></li>
</ul>
<h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1 拼接字符串</span></div><div class="line"><span class="keyword">var</span> arr1  = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr1.push.apply(arr1,arr2);</div><div class="line"></div><div class="line"><span class="comment">// 2 求数组中的最大值</span></div><div class="line"><span class="comment">//(Max只能接受离散值) 这里先转换为 Math.max.call(null,3,4,5);</span></div><div class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr2);</div></pre></td></tr></table></figure>
<ul>
<li><p>format</p>
</li>
<li><p>拼接 template 模板 绑定集合</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> &lt;!--模板王者演示--&gt;</div><div class="line">&lt;script id="arttemplate" type="text/html"&gt;</div><div class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &#123;&#123;each films&#125;&#125;</div><div class="line">            &lt;li&gt;</div><div class="line">                &lt;strong&gt;电影名称：&lt;/strong&gt;&#123;&#123;$value.title&#125;&#125;&lt;br&gt;</div><div class="line">                &lt;strong style='color:red'&gt;导演&lt;/strong&gt;&#123;&#123;$value.lead&#125;&#125;</div><div class="line">                &lt;strong style='color:green'&gt;主演:&lt;/strong&gt;&#123;&#123;$value.role&#125;&#125;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &#123;&#123;/each&#125;&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
<p>###字符串:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">接近数组: concat拼接, indexOf , charAt(index)返回特定位置的字符 </div><div class="line">return 'cat'.charAt(1); // returns "a"</div><div class="line">return 'cat'[1]; // returns "a"</div><div class="line">substr (fromIndex, length)  //删除的长度 </div><div class="line">substring(startIndex, endIndex)  //删除截止到</div><div class="line">slice(startIndex, endIndex) </div><div class="line">slice可对数组操作，substring不行</div><div class="line">    </div><div class="line">###字符串 -&gt; 数组 split()分割  *带p的 常用</div><div class="line">按给定字符串分割，返回分割后的多个字符串组成的字符串数组。</div><div class="line">    </div><div class="line">String.prototype.trim()</div><div class="line">从字符串的开始和结尾去除空格。参照部分 ECMAScript 5 标准。</div><div class="line">```  </div><div class="line"></div><div class="line">### 数组:</div><div class="line"></div><div class="line">```Js</div><div class="line">组合记忆 shift unshift pop push</div><div class="line">接近符串: 合并concat ,indexOf()返回索引, slice(start, end) 数组截取</div><div class="line"></div><div class="line">//创建一个数组的复制</div><div class="line">var shallowCopy = fruits.slice(); </div><div class="line"></div><div class="line">数组 -&gt; 字符串  join(separator) 数组拼接成字符串</div><div class="line"></div><div class="line">###splice  *带p的 常用 </div><div class="line">        splice(start, deleteCount, val1, val2,...) </div><div class="line">        从start位置开始删除,删除deleteCount个,添加val1,val2</div><div class="line"></div><div class="line"></div><div class="line">// ECMA5  </div><div class="line">0.</div><div class="line">var fruits =["apple","banana"]</div><div class="line">fruits.forEach(function (item, index, array) &#123; //遍历</div><div class="line">  console.log(item, index); // Apple 0   Banana 1</div><div class="line">&#125;);</div><div class="line"></div><div class="line">1.</div><div class="line">arr.every(callback[, thisArg]) //不改变原数组,多用来判断</div><div class="line">callback  用来测试每个元素的函数。</div><div class="line">thisArg   执行 callback 时使用的 this 值。</div><div class="line"></div><div class="line">2.</div><div class="line">array.map() 方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。</div><div class="line"></div><div class="line">array.map(callback[, thisArg])</div><div class="line"></div><div class="line">callback 原数组中的元素经过该方法后返回一个新的元素。</div><div class="line">currentValue   callback 的第一个参数，数组中当前被传递的元素。</div><div class="line">index          callback 的第二个参数，数组中当前被传递的元素的索引。</div><div class="line">array          callback 的第三个参数，调用 map 方法的数组。</div><div class="line">thisArg        执行 callback 函数时 this 指向的对象。</div><div class="line"></div><div class="line">常用方法:</div><div class="line">000. 示例</div><div class="line">array.map(function(currentValue, index, array)&#123;</div><div class="line">    </div><div class="line">&#125;)</div><div class="line"></div><div class="line">001. 返回数组各值的平方根</div><div class="line">var numbers = [1, 4, 9];</div><div class="line">var roots = numbers.map(Math.sqrt);</div><div class="line">/* roots的值为[1, 2, 3], numbers的值仍为[1, 4, 9] */</div><div class="line"></div><div class="line">002. 返回数组对应ASCII</div><div class="line">var map = Array.prototype.map</div><div class="line">var a = map.call("Hello World", function(x) &#123; </div><div class="line">  return x.charCodeAt(0); </div><div class="line">&#125;)</div><div class="line"></div><div class="line">3.</div><div class="line">Array.isArray()</div><div class="line">假如一个变量是数组则返回true，否则返回false。</div><div class="line"></div><div class="line">4.</div><div class="line">Array.prototype.toString()</div><div class="line">返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 </div><div class="line">Object.prototype.toString() 方法。</div><div class="line"></div><div class="line">5. //待定</div><div class="line">Array.from() </div><div class="line">从类(伪)数组或者迭代对象（iterable object）中创建一个新的数组实例。</div><div class="line"></div><div class="line">Array.from(arrayLike[, mapFn[, thisArg]])</div><div class="line">arrayLike  想要转换成真实数组的类数组对象或可遍历对象。</div><div class="line">mapFn   可选参数，如果指定了该参数，则最后生成的数组会经过该函数的加工处理后再返回。</div><div class="line">thisArg  可选参数，执行 mapFn 函数时 this 的值。</div><div class="line"></div><div class="line">6. 数组 转 字符串</div><div class="line">str = JSON.stringify(array)  </div><div class="line">//将JavaScript值转换为JSON字符串</div><div class="line">// JSON 序列化</div></pre></td></tr></table></figure>
<p>###new 的原理</p>
<ul>
<li>先开辟一个内存空间,先创建一个新的空对象 </li>
<li>把this 指向这个空对象,拷贝函数中的属性和方法</li>
<li>把空对象的 <em>proto</em> 指向 构造函数内部 原型对象 prototype</li>
<li>构造函数执行完成后如果没有 return 把这个新对象返回,(return的是基本数据类型和null,依然返回原对象,因为指针依然指向原对象)</li>
</ul>
<p>实例拷贝原理:<br>实例化的时候,都会将构造函数的属性拷贝一份(包括隐藏属性),同时赋给新值,因为有的构造函数有默认值,就会讲内存空间替换掉</p>
<p>构造函数:<br>return {}. 代替原对象<br>return ‘jacket’ 返回原对象</p>
<p>定义一个构造函数 是不分配内存的<br>只有实例化的时候 才分配内存</p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> 例题<span class="number">1</span>:</div><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</div><div class="line">b = a;</div><div class="line">a.x = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(b.x);  <span class="comment">//2</span></div><div class="line">a = &#123;<span class="attr">x</span>:<span class="number">3</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(b.x);  <span class="comment">//2</span></div><div class="line"></div><div class="line">例题<span class="number">2</span>:</div><div class="line"> <span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">var</span> b = a;</div><div class="line">    a.x = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;  </div><div class="line">    <span class="built_in">console</span>.log(a.x);  <span class="comment">// undefined</span></div><div class="line">    <span class="built_in">console</span>.log(b.x);  <span class="comment">// &#123;n:2&#125;</span></div><div class="line">    <span class="built_in">console</span>.log(a);    <span class="comment">// &#123;n:2&#125;</span></div><div class="line">    <span class="built_in">console</span>.log(b)     <span class="comment">// &#123;n:1,x:&#123;n:2&#125;</span></div><div class="line">    </div><div class="line"> <span class="comment">/*</span></div><div class="line">  根据优先级 a.x -&gt; 给原&#123;n:1&#125;对象 添加一个x属性 undefined,</div><div class="line">  根据 赋值运算从右往左, </div><div class="line">  a=&#123;n:2&#125; -&gt; a 指向一个新对象&#123;n:2&#125;,</div><div class="line">  a.x = a -&gt; &#123;n:1&#125;.x 指向 &#123;n:2&#125;</div><div class="line">  */</div></pre></td></tr></table></figure>
<h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj1,obj2</span>) </span>&#123;</div><div class="line">obj2 = obj2 || &#123;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj1)</div><div class="line">&#123;</div><div class="line">  <span class="comment">//判断是否是实例属性</span></div><div class="line">  <span class="keyword">if</span>(obj1.hasOwnProperty(i))</div><div class="line">  &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj1[i] == <span class="string">'object'</span>)</div><div class="line">      &#123;</div><div class="line">          obj2[i] = <span class="built_in">Array</span>.isArray(obj1[i])?[]:&#123;&#125;;</div><div class="line">          <span class="comment">// 先创建一个空对象,来接收对象</span></div><div class="line">          deepCopy(obj1[i],obj2[i]); <span class="comment">//函数的调用(实参的值赋值给形参)</span></div><div class="line">      &#125;<span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">          <span class="comment">//基础数据类型</span></div><div class="line">          obj2[i] = obj1[i];</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">deepCopy(obj,obj2);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;小知识点&quot;&gt;&lt;a href=&quot;#小知识点&quot; class=&quot;headerlink&quot; title=&quot;小知识点&quot;&gt;&lt;/a&gt;小知识点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;throw “抛出异常”&lt;br&gt;  &lt;code&gt;throw new TypeError
    
    </summary>
    
    
  </entry>
  
</feed>

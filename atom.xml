<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Werther的博客</title>
  <subtitle>233333</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-03T08:37:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Werther</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React官方教程笔记</title>
    <link href="http://yoursite.com/2017/02/22/layout/"/>
    <id>http://yoursite.com/2017/02/22/layout/</id>
    <published>2017-02-22T12:21:04.000Z</published>
    <updated>2017-03-03T08:37:26.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3>1. 安装</h3><p></p>
<p></p><h4>1.1 尝试</h4><p></p>
<p>开始之前可以先去<a href="http://codepen.io/gaearon/pen/rrpgNB?editors=0010" target="_blank">codePen</a>尝试一下，也可以下载这份<a href="https://facebook.github.io/react/downloads/single-file-example.html" target="_blank">HTML文件</a>并编辑它来尝试React。</p><br><h4>1.2 <a href="https://github.com/facebookincubator/create-react-app" target="_blank">Creat React App</a>工具</h4><br><p>推荐使用React官方提供的<a href="https://github.com/facebookincubator/create-react-app" target="_blank">Creat React App</a>工具，来快速新建React单页面应用项目。</p>


<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install -g create-react-app</div><div class="line">create-react-app hello-world</div><div class="line">cd hello-world</div><div class="line">npm start</div></pre></td></tr></table></figure>
<p></p><h4>1.3 推荐工作流</h4><p></p>
<p></p><p>虽然React可以在没有任何构建工具的情况下进行使用，但在生产环境还是应该使用成套的构建工具来将React用于你的项目。一个现代化的（前端）工作流通常由以下三部分组成：</p><p></p>
<p><ul></ul></p>
<p><li><br><strong>包管理器</strong>：比如<a href="https://yarnpkg.com/" target="_blank">Yarn</a>或<a href="https://www.npmjs.com/" target="_blank">Npm</a>，可以让你更方便使用第三方库而不用自己造轮子</li></p>
<p><li><br><strong>编译器</strong>：比如<a href="http://babeljs.io/" target="_blank">Babel</a>，能翻译使用了最新语法的代码到浏览器兼容较好的版本</li></p>
<p><li><br><strong>打包器</strong> ：比如<a href="https://webpack.github.io/" target="_blank">Webpack</a>或<a href="http://browserify.org/" target="_blank">Browserify</a>，让你能够编写各种风格的模块化的代码，由它们打包和压缩</li><br></p>
<p></p><p>基于以上工作流，你可以通过<a href="https://www.npmjs.com/" target="_blank">Npm</a>或者<a href="https://yarnpkg.com/" target="_blank">Yarn</a>来将React安装到项目，然后使用<a href="http://babeljs.io/" target="_blank">Babel</a>来编译JSX和ES6语法，最终用于生产环境的代码还需要经过<a href="https://webpack.github.io/" target="_blank">Webpack</a>或<a href="http://browserify.org/" target="_blank">Browserify</a>的打包和压缩才能使用。</p><p></p>
<p></p><h4>1.4 CDN服务</h4><p></p>
<pre><code class="html">&lt;!--开发环境--&gt;
&lt;script src="https://unpkg.com/react@15/dist/react.js"&gt;&lt;/script&gt;
&lt;script src="https://unpkg.com/react-dom@15/dist/react-dom.js"&gt;&lt;/script&gt;
&lt;!--生产环境--&gt;
&lt;script src="https://unpkg.com/react@15/dist/react.min.js"&gt;&lt;/script&gt;
&lt;script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"&gt;&lt;/script&gt;</code></pre>
<h3>2. Hello World</h3>
<p>一个最基本的React例子：</p>
<pre><code class="javascript">ReactDom.render(
  &lt;h1&gt;Hello world!&lt;/h1&gt;,
  document.getElementById('root')
)</code></pre>
<p>你可以在<a href="http://codepen.io/gaearon/pen/ZpvBNJ?editors=0010" target="_blank">COdePen</a>上尝试修改这段代码看看效果。</p>
<p>React推荐配合ES6语法使用，但仅需要了解<code>() =&gt; {}</code>、<code>const</code>、<code>let</code>、<code>`template literals`</code>和<code>classes</code>这几个特性即可</p>
<h3>3. 初识JSX</h3>
<pre><code class="javascript">const element = &lt;h1&gt;hello world&lt;/h1&gt;</code></pre>
<p>上面这段既不是字符串又不是HTML的代码（其实主要指的是<code>&lt;h1&gt;hello world&lt;/h1&gt;</code>）就是JSX了。官方推荐搭配使用JSX，有别于模板语言，JSX是全功能的JavaScript。JSX 用于创建“React元素”。</p>
<h4>3.1 JSX是表达式</h4>
<p>跟其他JavaScript表达式一样，JSX也是表达式，被React编译后的JSX返回的是普通的JavaScript对象，这意味着你可以类似对待普通JavaScript表达式那样对待一个JSX语句：将它赋值给变量、将他作为函数参数或返回值等等：</p>
<pre><code class="javascript">function getGreating (user) {
  if (user) {
    return &lt;h1&gt;hello {formatName(user)}!&lt;/h1&gt;
  }
  return &lt;h1&gt;hello world!&lt;/h1&gt;
}</code></pre>
<p>稍微深入一点，Babel会将JSX转换成对<code>react.creatElement()</code>的调用，所以下面两种写法完全等价：</p>
<pre><code class="javascript">// JSX
const mine = (
  &lt;h1 className="greeting"&gt;
    这是我的标题
  &lt;/h1&gt;
)

// javaScript
const yours = react.creatElement(
  'h1',
  { className: 'greeting ' },
  '这是你的标题'
)</code></pre>
<p>然而<code>react.createElement()</code>返回的结果是类似下面这样的一个对象：</p>
<pre><code class="javascript">const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: '这是谁的标题'
  }
 // ...
}</code></pre>
<p>这就不难理解JSX的用法了——像一个javaScript表达式那样去使用。</p>
<h4>3.2 在JSX中嵌入JavaScript表达式</h4>
<p>使用花括号<code>{}</code>，可以在JSX中嵌入任意JavaScript表达式：</p>
<pre><code class="javascript">const element = (
  &lt;h1&gt;
    Hello, {formatName(user)}!
  &lt;/h1&gt;
);</code></pre>
<p>为了提升可读性可以对JSX使用缩进和换行，但是为了避免JavaScript自动添加分号的机制给我们带来麻烦，应该在换行的JSX外面添加一对小括号。</p>
<blockquote><p>在JSX的元素中插入用户输入的内容是安全的，React默认会对元素内的文本进行转义以防止XSS攻击。</p></blockquote>
<h4>3.3 在JSX中声明属性</h4>
<p>就像在HTML中声明元素属性，可以在“React元素”上直接声明某个属性。当希望属性值是变量或引用时，则就像在在JSX中嵌入JavaScript表达式，使用花括号<code>{}</code>来插入“React元素”的值。</p>
<pre><code class="javascript">// 简单属性值
const element = &lt;div tabIndex="0"&gt;&lt;/div&gt;;
// 属性值为变量或引用
const element = &lt;img src={user.avatarUrl}&gt;&lt;/img&gt;;</code></pre>
<blockquote><p>需要注意的是，JSX中元素的属性名统一使用驼峰写法（camelCase），并且在React的内置元素上，诸如<code>class</code>、<code>for</code>等属性还需要换成<code>className</code>和<code>htmlFor</code>来使用（自定义元素可以正常使用）。</p></blockquote>
<h4>3.4 在JSX中声明子元素</h4>
<p>如果“React元素”的标签内没有子元素，则可以像在XML中那样使用单标签（包括React内置的HTML元素）。</p>
<pre><code class="javascript">const element = &lt;img src={user.avatarUrl} /&gt;;</code></pre>
<p>如果存在子元素，则就像在HTML中那样直接包裹在父元素中即可（注意换行的JSX要加小括号<code>()</code>）：</p>
<pre><code class="javascript">const element = (
  &lt;div&gt;
    &lt;h1&gt;Hello!&lt;/h1&gt;
    &lt;h2&gt;Good to see you here.&lt;/h2&gt;
  &lt;/div&gt;
)</code></pre>
<h3>4. 渲染元素</h3>
<p>元素是React应用的最小组成部分。元素描绘了界面。不同于浏览器的DOM元素，React元素是简单对象，创建它们比创建真实的DOM元素要节省太多性能，同时React DOM负责将React元素和真实DOM元素对应起来：</p>
<pre><code class="javascript">const ele = &lt;h1&gt;Hello World!&lt;/h1&gt;</code></pre>
<blockquote><p>不能将React元素和React组件搞混，React元素是React组件的组成部分，一个React组件由一个或多个React元素组成。同时也要注意区别DOM元素和React元素，DOM元素指的是HTML标准中规定的具体的某个元素，而React元素实际上是用于告诉React如何渲染页面、渲染时用到哪些DOM元素的一个配置对象，它与DOM元素不是一个概念。</p></blockquote>
<h4>4.1 将React元素渲染到DOM中</h4>
<p>先创建一个React元素，然后用<code>ReactDOM.render()</code>将其渲染到DOM的某个元素中（就这么简单）：</p>
<pre><code class="javascript">const ele = &lt;h1&gt;Hello World!&lt;/h1&gt;
ReactDOM.render(
  ele,
  document.getElementById('root') // 假设页面上有一个id为root的元素
)</code></pre>
<h4>4.2 更新已经渲染的元素</h4>
<p>请记住，React元素是不可变的，一旦创建，你就不能再直接改变它的属性或子元素。假如我们要更新上面已经渲染到<code>id</code>为<code>root</code>的元素中的React元素，那么在没有其他手段的前提下就只能是像电影胶片一样一帧一帧进行刷新：</p>
<pre><code class="javascript">function tick() {
  const element = (
    &lt;div&gt;
      &lt;h1&gt;Hello World!&lt;/h1&gt;
      &lt;p&gt;{new Date().toLocaleTimeString()}&lt;/p&gt;
    &lt;/div&gt;  
  )
  ReactDOM.render(
    ele,
    document.getElementById('root') // 假设页面上有一个id为root的元素
  )
}
setInterval(tick, 1000) // 每秒刷新</code></pre>
<p>当然正常情况下我们不会这么做，但是这里很好的演示了另外一个问题——React在渲染页面时都做了什么？答案是它只渲染了与上次渲染时DOM中不同的部分！React会比较当前渲染与上次渲染时DOM中的不同之处，并只刷新这些地方！</p>
<div class="image-package">
<img src="https://facebook.github.io/react/img/docs/granular-dom-updates.gif" data-original-src="https://facebook.github.io/react/img/docs/granular-dom-updates.gif"><br><div class="image-caption">图片.png</div>
</div>
<h3>5. 组件和<code>props</code>（输入属性）</h3>
<p>组件能让你将UI分割成独立的可复用的片段，这些片段都有各自隔离的作用域，不会互相干扰。你可以将组件理解成类似函数的概念，组件从它的<code>props</code>属性接受参数，然后返回React元素来描述UI。</p>
<h4>5.1 用函数和类（<code>class</code>）定义组件</h4>
<p>最简单的定义组件的方式就是写一个构造函数：</p>
<pre><code class="javascript">function Welcom (props) {
  return &lt;h1&gt;hello, {props.name}&lt;/h1&gt;
}</code></pre>
<p>上面这个<code>Welcom</code>构造函数就是一个合法的React组件，因为它接受一个对象作为参数，然后返回React元素。我们称这样的组件为“函数式”的组件因为它就是一个JavaScript构造函数。当然也可以使用ES6的<code>class</code>特性来定义函数：</p>
<pre><code class="javascript">class Welcom extends React.Component {
  render () {
    return &lt;h1&gt;hello, {this.props.name}&lt;/h1&gt;
  }
}</code></pre>
<p>ES6的<code>class</code>特性其实是ES5的构造函数和对象继承特性的一个语法糖，上面的写法也完全可以转换为ES5的写法。React推荐这种写法存粹是因为写起来方便，可读性也更强。但这种写法的重点是从<code>React.Component</code>继承一些核心的属性，后文还会细说。不过目前简单起见，我们暂时还只是用简单函数来创建组件。</p>
<h4>5.2 渲染组件</h4>
<p>React元素不仅仅可以用于指定需要使用的DOM元素，也可以用于指代自定义的组件：</p>
<pre><code class="javascript">// 指代需要使用的DOM元素
const ele1 = &lt;div /&gt;
// 指代用户自定义的组件
const ele2 = &lt;Welcom name="Sara"&gt;</code></pre>
<p>当React遇到像<code>&lt;Welcom name="Sara"&gt;</code>这种自定义组件时，它会将JSX属性（也就是React元素属性）都放在一个对象中（这个对象就是<code>props</code>）并将其传递给组件的构造函数，构造函数再返回React元素用于渲染。</p>
<h4>5.3 组件的组合</h4>
<p>既然React元素可用于指代自定义组件，那么组件之间就可以相互嵌套使用：</p>
<pre><code class="javascript">function Welcom (props) {
  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;
}
function WelcomList () {
  return (
    &lt;div&gt;
      &lt;Welcom name="Sara" /&gt;
      &lt;Welcom name="Lily" /&gt;
      &lt;Welcom name="Tom" /&gt;
    &lt;/div&gt;
  )
}
function App () {
  return &lt;WelcomList /&gt;
}
ReactDOM.render(
  &lt;App /&gt;,
  document.getElementById('root')
)</code></pre>
<h4>5.4 组件的提取</h4>
<p>既然组件可以嵌套组合使用，我们就可以将一个大的组件分割成很多小的组件。React官方鼓励对UI进行切割，分成不同的组件来实现。基本上一组React元素是否要提取成组件，可从以下两点考虑：</p>
<ul>
<li>这组元素在别的地方也要使用</li>
<li>这组元素内部的功能相对复杂</li>
</ul>
<p>这部分其实是组件化的思路，这里不再展开。</p>
<h4>5.5 只读的<code>props</code>
</h4>
<p>类似于“纯函数”的概念（不会改变任何外部的值，包括输入的参数，即与外部完全无耦合），不管是使用构造函数还是类来定义组件，组件都不应该修改它的<code>props</code>，因为这是输入到组件中的参数。在这一点上，React做了严格限定：</p>
<blockquote><p><strong>所有的React组件必须像“纯函数”那样永远不修改自己的<code>props</code>属性</strong></p></blockquote>
<h3>6. <code>state</code>（私有状态）和生命周期</h3>
<p>我们以上文的时钟的例子来理解组件的私有状态和生命周期。</p>
<pre><code class="javascript">function tick() {
  const element = (
    &lt;div&gt;
      &lt;h1&gt;Hello World!&lt;/h1&gt;
      &lt;p&gt;{new Date().toLocaleTimeString()}&lt;/p&gt;
    &lt;/div&gt;  
  )
  ReactDOM.render(
    ele,
    document.getElementById('root') // 假设页面上有一个id为root的元素
  )
}
setInterval(tick, 1000)</code></pre>
<p>首先我们将时钟作为组件提取出来：</p>
<pre><code class="javascript">// 时钟组件
function Clock(props) {
 return (
    &lt;div&gt;
      &lt;h1&gt;Hello World!&lt;/h1&gt;
      &lt;p&gt;{props.date.toLocaleTimeString()}&lt;/p&gt;
    &lt;/div&gt;  
  )
}
// 重新渲染
function tick () {
  ReactDOM.render(
    &lt;Clock date={new Date()} /&gt;,
    document.getElementById('root') // 假设页面上有一个id为root的元素
  )
}
// 每秒刷新
setInterval(tick, 1000)</code></pre>
<p>我们发现对于<code>Clock</code>组件来说，刷新时间的功能其实完全与外部无关，它不涉及到任何外部的变量，完全可以由<code>Clock</code>组件自己来实现而不是让外部传递时间给它。此时<code>Clock</code>组件就需要“私有状态”来实现这个功能了。</p>
<h4>6.1 从<code>React.Component</code>上继承</h4>
<p>到目前为止，我们使用简单的构造函数来创建React组件，不管外部输入属性还是私有状态，都需要我们手动创建和管理，诸如修改私有状态后刷新渲染，外部输入属性为只读这类功能，如果我们没有在构造函数中手动实现则不会存在。</p>
<p>这时我们可以从<code>React.Component</code>这个React内置的构造函数上继承一些有用的方法，这其中就包括对“私有状态”和“生命周期”实现。我们可以使用ES6的<code>class</code>特性来实现这个继承（当然这不是必须的，完全可以使用ES5的构造函数和原型的写法，但那样会繁琐很多，可读性也大大下降）：</p>
<pre><code class="javascript">class Clock extends React.Component {
  render () { // React提供的用于渲染和刷新组件的钩子函数
    return (
      &lt;div&gt;
        &lt;h1&gt;Hello, world!&lt;/h1&gt;
        &lt;h2&gt;It is {this.props.date.toLocaleTimeString()}.&lt;/h2&gt;
      &lt;/div&gt;
    )
  }
}</code></pre>
<h4>6.2 定义组件私有状态</h4>
<p><code>React.Component</code>提供了<code>props</code>和<code>state</code>来分别访问外部输入属性和内部私有状态。我们可以在时钟组件中通过<code>state</code>访问私有状态，然后在其构造函数中对该私有状态进行初始化，最后将它渲染到页面上：</p>
<pre><code class="javascript">class Clock extends React.Component {
  constructor (props) {
    super(props) // ES6中类的constructor函数可以通过super访问其父类的构造函数
    this.state = { date: new Date() }
  } // 注意，ES6中类的方法之间不需要任何符号
  render () {
    return (
      &lt;div&gt;
        &lt;h1&gt;Hello, world!&lt;/h1&gt;
        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;
      &lt;/div&gt;
    )
  }
}
ReactDOM.render(
  &lt;Clock /&gt;, // 外部不再干涉Clock组件的刷新功能
  document.getElementById('root)
)</code></pre>
<blockquote><p>注意<code>Clock</code>类中的<code>constructor</code>构造函数中，调用了父类的构造函数，这是为了实现完全的继承。使用<code>class</code>特性创建React组件时应当总是执行这一步。</p></blockquote>
<h4>6.3 添加生命周期函数</h4>
<p>从组件被创建到组件被渲染到页面到最终被销毁，React提供了一系列的“生命周期钩子”，用于在组件的不同阶段调用回掉函数。为了让<code>Clock</code>组件能够自己刷新，我们希望在组件被创建后立即添加一个计时器进行每秒刷新，同时在组件被销毁时一并销毁这个计时器，这样我们就需要用到两个生命周期钩子函数：</p>
<ul>
<li>
<code>componentDidMount</code>：组件被渲染到页面后执行</li>
<li>
<code>componentWillUnmount</code>：组件被销毁前执行</li>
</ul>
<pre><code class="javascript">class Clock extends React.Component {
  constructor (props) {
    super(props) // ES6中类的constructor函数可以通过super访问其父类的构造函数
    this.state = { date: new Date() }
  } // 注意，ES6中类的方法之间不需要任何符号
  render () {
    return (
      &lt;div&gt;
        &lt;h1&gt;Hello, world!&lt;/h1&gt;
        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;
      &lt;/div&gt;
    )
  }
  componentDidMount () {
    this.timerID = setInterval(this.tick, 1000)
  }
  componentWillUnmount() {
    clearInterval(this.timerID)
  }
}
ReactDOM.render(
  &lt;Clock /&gt;, // 外部不再干涉Clock组件的刷新功能
  document.getElementById('root)
)</code></pre>
<blockquote><p>注意我们将定时器存储在了组件实例上，而不是<code>state</code>中，请先记住一个原则：任何没有在组件的<code>render()</code>函数中使用的变量，都不应该存放在<code>state</code>中</p></blockquote>
<p>然后再添加<code>tick</code>方法。在这个方法中我们需要改变组件<code>state</code>中的<code>date</code>的值，这时需要用到方法<code>setState()</code>，该方法会通知React现在<code>state</code>已经改变了，而后React会去重新调用组件的<code>Render()</code>方法刷新DOM。这也是为什么会有<strong>任何没有在组件的<code>render()</code>函数中使用的变量，都不应该存放在<code>state</code>中 </strong>一说：</p>
<pre><code class="javascript">class Clock extends React.Component {
  constructor (props) {
    super(props) // ES6中类的constructor函数可以通过super访问其父类的构造函数
    this.state = { date: new Date() }
  } // 注意，ES6中类的方法之间不需要任何符号
  render () {
    return (
      &lt;div&gt;
        &lt;h1&gt;Hello, world!&lt;/h1&gt;
        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;
      &lt;/div&gt;
    )
  }
  componentDidMount () {
    this.timerID = setInterval(this.tick, 1000)
  }
  componentWillUnmount() {
    clearInterval(this.timerID)
  }
  tick () {
    this.setState({ date: new Date() }) // 该方法会触发React调用实例的render方法进行重绘
  }
}
ReactDOM.render(
  &lt;Clock /&gt;, // 外部不再干涉Clock组件的刷新功能
  document.getElementById('root)
)</code></pre>
<h4>6.4 组件生命周期小结</h4>
<ul>
<li>1) 当把组件传递给<code>ReactDOM.render()</code>函数后，React会调用组件的构造函数<code>constructor</code>，进行一些初始化</li>
<li>2) 然后React会去调用<code>Clock</code>组件的<code>render()</code>方法将组件渲染出来</li>
<li>3) 当组件渲染完毕后，React会调用<code>componentDidMount()</code>生命周期钩子函数</li>
<li>4) 当<code>setState()</code>函数被调用时，React会重新调用组件的<code>render()</code>方法进行重绘</li>
<li>5) 当组件被从DOM中移除时，React会调用<code>componentWillUnmount()</code>生命周期钩子函数</li>
</ul>
<h4>6.5 <code>setState</code>注意事项</h4>
<ul>
<li>
<strong>不要直接改变<code>state</code></strong><br>直接对组件<code>state</code>中的属性赋值将不会触发DOM更新，因为React并不知道<code>state</code>被改变了</li>
<li>
<strong><code>state</code>的更新可能是异步的</strong><br>React会一次处理多个对<code>setState</code>的调用以提高性能，所以调用<code>setState()</code>时不应当直接基于另外一些来自<code>state</code>或<code>props</code>中的属性进行计算，很有可能当前计算的值并不是最终的值，当用于计算的另一些值再次变化后，React并不会刷新DOM（因为没有再次调用<code>setState()</code>）。为了修正这点，React提供另一种调用<code>setState()</code>函数的方式：传入一个函数，而不是对象<pre><code class="javascript">// 错误的用法
this.setState({
counter: this.state.counter + this.props.increment
})
// 正确的用法
this.setState((prevState, props) =&gt; ({ // 接受一个表示前次state的参数和一个当前props的参数
counter: prevState.counter + props.increment // 这里实际上是返回了一个对象，是ES6箭头函数的简写
}))</code></pre>
</li>
<li>
<strong><code>setState</code>是对象的合并而不是替换</strong><br><code>setState</code>方法是将传入的参数对象或函数返回的对象与现有的<code>state</code>对象进行合并，非常类似于使用<code>Object.assign(prevState, newState)</code>的效果</li>
</ul>
<h4>6.6 单项数据流</h4>
<p>在React组件的嵌套中，父组件通过<code>props</code>向子组件传递数据，不管传递进来的数据是来自于父组件的<code>props</code>还是<code>state</code>还是别的地方，子组件不知道也不用关心，因为它不能修改通过<code>props</code>传递进来的数据而只能读取它。这样，数据就可以从最外层的父组件一路向内传递下去，但反过来却不行。</p>
<p>这就是传说中的“单项数据流”（"top-down" or "unidirectional" data flow）了：每个组件只能修改本身和其子组件的数据，而不能修改父组件的数据。这样的好处不言而喻，数据和状态的管理会更加方便，但有时候在应用越来越复杂的时候，可能需要多个组件共享某些数据或状态，因此诞生了很多用于管理数据和状态的库，redux就是其中最有名的一个。</p>
<h3>7. 事件</h3>
<h4>7.1 基本用法</h4>
<p>在React中绑定事件跟直接在HTML中绑定事件非常相似，定义一个事件处理函数，并在JSX中绑定它：</p>
<pre><code class="javascript">function Greeting () {
  function sayHi(e) {
    e.preventDefault()
    console.log('Hi!')
  }
 return (
    &lt;a onClick={Greeting}&gt;Click me to say hi!&lt;/a&gt;
 )
}</code></pre>
<p>所有事件绑定属性比如<code>onClick</code>均使用驼峰写法（camelCase），事件绑定属性的值不是字符串而是事件处理函数名称，可以带上<code>()</code>并传参，无参数时可省略<code>()</code>；</p>
<h4>7.2 使用类定义组件时事件处理函数<code>this</code>的指向问题</h4>
<p>使用ES6的<code>class</code>特性定义组件时，通常的做法是将事件处理函数当作该类的方法写在类中。但需要注意的是方法的<code>this</code>指向。</p>
<p>定义在类中的方法的默认的<code>this</code>指向的是当前的类的实例，但事件处理函数因为是绑定到了具体的元素上，就会丢失定义时<code>this</code>的指向。如果你的处理函数中使用了<code>this</code>关键字来指向当前组件实例，那么你需要手动将该方法的<code>this</code>绑定到当前组件实例，有三种方法可以进行绑定：</p>
<p><strong>1）在类的constructor中调用或在JSX中调用<code>Function.prototype.bind()</code>手动绑定</strong></p>
<pre><code class="javascript">class Toggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};
    this.handleClick = this.handleClick.bind(this); // 手动绑定
  }

  handleClick() {
    // console.log(this)
    this.setState(prevState =&gt; ({
      isToggleOn: !prevState.isToggleOn
    }));
  }

  render() {
    return (
      // &lt;button onClick={this.handleClick.bind(this)}&gt; // 在这里绑定也可以
      &lt;button onClick={this.handleClick}&gt;
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      &lt;/button&gt;
    );
  }
}

ReactDOM.render(
  &lt;Toggle /&gt;,
  document.getElementById('content')
);</code></pre>
<p><strong>2）在JSX的事件绑定属性中的事件处理函数外层再套一个箭头函数，在其中返回处理函数调用结果</strong></p>
<pre><code class="javascript">render() {
  return (
    &lt;button onClick={(e) =&gt; this.handleClick(e)}&gt; // 这么绑定也行
      Click me
    &lt;/button&gt;
  );
}</code></pre>
<p><strong>3）Babel提供的一个ES8+的实验性质的写法</strong></p>
<pre><code class="javascript">class LoggingButton extends React.Component {
  handleClick = () =&gt; { // 纯粹的实验性质的写法，需要babel的支持
    console.log('this is:', this);
  }
  render() {
    return (
      &lt;button onClick={this.handleClick}&gt;
        Click me
      &lt;/button&gt;
    );
  }
}</code></pre>
<h4>7.3 事件对象</h4>
<p>React的事件对象是一个完全由React给出的事件对象，该对象对各个浏览器做了兼容，同时保留了标准事件对象的接口，详细信息可以查看React官网的参考。使用时需要关心的是如何在事件处理函数中使用事件对象。</p>
<p>在事件绑定的JSX中，处理函数接受一个名为<code>event</code>的参数来表示事件对象，可以认为<code>event</code>在事件绑定插值中属于React的保留字，如果需要往事件处理函数中传递更多参数，请使用其他标识符。</p>
<p>另外，7.2小节中不同的事件绑定写法也对事件对象的处置略有不同，主要体现在事件绑定JSX中：</p>
<pre><code class="javascript">// 无括号
&lt;button onClick={this.handleClick}&gt;
  Click me
&lt;/button&gt;

// 带括号
&lt;button onClick={this.handleClick(event)}&gt;
  Click me
&lt;/button&gt;

// 调用了bind()
&lt;button onClick={this.handleClick.bind(this, event)}&gt;
  Click me
&lt;/button&gt;</code></pre>
<ul>
<li>当事件绑定插值中的处理函数省略了<code>()</code>时，处理函数默认接受一个表示事件对象的参数，</li>
<li>当事件绑定插值中的处理函数未省略<code>()</code>时，则需要显示地使用保留字<code>event</code>来传入事件对象，未传入则为<code>undefined</code>；<strong>注意，不管有没有在<code>constructor</code>中绑定<code>this</code>，直接在处理函数名后加<code>()</code>会导致页面初始化时该函数被立即执行一次，可能会有意想不到的错误，比如不能调用<code>setState()</code>方法等，所以强烈不建议用这种写法</strong>
</li>
<li>当事件绑定插值中的处理函数调用了<code>bind()</code>时，可以显示地使用保留字<code>event</code>来传入事件对象，否则React会在<code>bind()</code>函数参数序列的末尾默认增加一个表示事件对象的参数</li>
</ul>
<p>最后，在React中不能通过<code>return false</code>来阻止默认事件，而是需要在事件处理函数中显式调用<code>event.preventDefault()</code>。</p>
<h3>8. 条件渲染</h3>
<p>所有的JavaScript条件语句都可以用于React条件渲染，因为本质上JSX就是JavaScript的扩展语言。基于此有三种常用的条件渲染：</p>
<ul>
<li><code>if...else...</code></li>
</ul>
<pre><code class="javascript">function UserGreeting () {
  return &lt;h1&gt;Welcom back!&lt;/h1&gt;
}
function GuestGreeting () {
  return &lt;h1&gt;Please Sign up.&lt;/h1&gt;
}
function App (props) {
  if (!props.isLoggedIn) {
    return &lt;GuestGreeting /&gt;
  }
  return &lt;UserGreeting /&gt;
}

ReactDOM.render(
  &lt;App isLoggedIn={false} /&gt;,
  document.getElementById('root')
)</code></pre>
<ul>
<li>三元运算符</li>
</ul>
<pre><code class="javascript">function App (props) {
  return props.isLoggedIn ? &lt;UserGreeting /&gt; : &lt;GuestGreeting /&gt;
}</code></pre>
<ul>
<li>短路</li>
</ul>
<pre><code class="javascript">function App (props) {
  return props.isLoggedIn &amp;&amp; &lt;UserGreeting /&gt; // props.isLoggedIn为true则显示UserGreeting，否则不显式
}</code></pre>
<p>如果判断逻辑比较复杂，不能用三元或者短路表达式编写，且判断后的结果需要直接用在JSX中（JSX中只能通过<code>{}</code>插入表达式，而不能使用语句），则可使用<code>if...else...</code>语句判断并将结果保存到变量，然后再返回变量或通过<code>{}</code>插值到JSX中：</p>
<pre><code class="javascript">function UserGreeting () {
  return &lt;h1&gt;Welcom back!&lt;/h1&gt;
}
function GuestGreeting () {
  return &lt;h1&gt;Please Sign up.&lt;/h1&gt;
}
function Button (props) {
  return &lt;button onClick={ props.handleToggle }&gt;toggle me&lt;/button&gt;
}

class App extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
      prevState: false
    }
  }
  handleClick () {
    this.setState(prevState =&gt; ({ isLoggedIn: !prevState.isLoggedIn }))
  }
  render () {
    let greeting = this.state.isLoggedIn ? &lt;UserGreeting /&gt; : &lt;GuestGreeting /&gt;
    return (
      &lt;div&gt;
        &lt;div&gt;&lt;Button handleToggle={this.handleClick.bind(this)} /&gt;&lt;/div&gt; // 注意this的重定向
        { greeting }
      &lt;/div&gt;
    )
  }
}

ReactDOM.render(
  &lt;App isLoggedIn={false} /&gt;,
  document.getElementById('root')
)</code></pre>
<p>另外，在组件的<code>render</code>函数中返回假值，会阻止组件渲染，结合条件判断，能够达到隐藏或显示组件的目的。</p>
<h3>9. 列表和<code>key</code>（索引）</h3>
<h4>9.1 渲染列表</h4>
<p>可以像下面这样渲染一个列表：</p>
<pre><code class="javascript">class List extends React.Component {
  constructor (props) {
    super(props)
  }
  render () {
    let list = this.props.number.map(number =&gt; ( // 拼装li
      &lt;li&gt;{number}&lt;/li&gt;
    ))
    return (
      &lt;ul&gt;{list}&lt;/ul&gt;
    )
  }
}

ReactDOM.render(
  &lt;List number={[1, 2, 3, 4, 5]} /&gt;,
  document.getElementById('root')
)</code></pre>
<p>也可以将<code>map()</code>调用通过<code>{}</code>内联到JSX中：</p>
<pre><code class="javascript">class List extends React.Component {
  constructor (props) {
    super(props)
  }
  render () {
    return (
      &lt;ul&gt;{
        this.props.number.map(number =&gt; ( // 内联map()方法
          &lt;li key={number}&gt;{number}&lt;/li&gt;
        ))
      }&lt;/ul&gt;
    )
  }
}</code></pre>
<p>通常会使用数组的<code>map()</code>方法来从数组拼装列表，这与使用JavaScript拼装HTML类似。但上面的代码运行时会出现警告：</p>
<div class="image-package">
<img src="http://upload-images.jianshu.io/upload_images/3094907-2df3975880fcb18d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/3094907-2df3975880fcb18d.png?imageMogr2/auto-orient/strip%7CimageView2/2"><br><div class="image-caption">列表渲染报错</div>
</div>
<h4>9.2 <code>key</code>
</h4>
<p>在渲染列表时，React的差异比较算法需要一个在列表范围内的唯一<code>key</code>来提高性能（通常用于获知哪个列表项改变了）。这个唯一的<code>key</code>需要我们手动提供。React官方建议使用列表数据中可用于唯一性标识的字段来作为列表项渲染时的<code>key</code>。如果实在没有，则可使用数组的<code>index</code>勉为其难，性能上可能会打折扣。</p>
<pre><code class="javascript">    let list = this.props.number.map(number =&gt; ( // 拼装li
      &lt;li key={number.toString()}&gt;{number}&lt;/li&gt;
    ))</code></pre>
<p><code>key</code>的使用需要注意一下几点：</p>
<ul>
<li>
<strong>只能在数组内指定<code>key</code></strong>：准确地说，只能在<code>map()</code>的回调函数中使用<code>key</code>
</li>
<li>
<strong><code>key</code>需要在列表范围内保证唯一性</strong>：同一个数组中的<code>key</code>需要保证唯一性，但不同数组中的<code>key</code>无所谓</li>
<li>
<strong><code>key</code>不会作为<code>props</code>传入组件</strong>：可以认为<code>key</code>是React在JSX中的保留字，你不能用它来向组件传递数据而应该改用其他词</li>
</ul>
<h3>10. 表单</h3>
<p>在React中存在一个“受控组件（Controlled Component）”的概念，专门指代被React控制了的表单元素。通过<code>onChange</code>事件的处理函数将表单元素值的变化映射到组件的<code>state</code>中，然后再将组件中的这个映射好的值通过<code>{}</code>在JSX中插值给表单元素的<code>value</code>，（二者缺一不可）这就是一个被React控制了的组件也即“受控组件”了。</p>
<pre><code class="javascript">class Form extends React.Component {
  constructor (props) {
    super(props)
    this.state ={
      inputTextValue: ''
    }
    this.handleInputTextChange = this.handleInputTextChange.bind(this)
  }
  render () {
    return (
      &lt;form&gt;
        &lt;input
          value={this.state.inputTextValue} // 从state中将值绑定到表单元素
          onChange={this.handleInputTextChange}/&gt; 
      &lt;/form&gt;
    )
  }
  handleInputTextChange (e) {
    this.setState({
      inputTextValue: e.target.value // 将表单元素的值的变化映射到state中
    }) 
  }
}

ReactDOM.render(
  &lt;Form /&gt;,
  document.getElementById('root')
)</code></pre>
<p>基本上所有表单元素的使用都跟上例一样，通过<code>value</code>来“控制”元素，让<code>state</code>成为组件唯一的状态保存地。但是有时候在非React项目中使用React或者一些其他原因，我们不希望使用受控组件时，可以选择<a href="https://facebook.github.io/react/docs/uncontrolled-components.html" target="_blank">“非受控组件”</a>技术，这里不再展开。</p>
<h3>11. 共享状态提升</h3>
<p>考虑下面的需求，页面上有两个输入框，用来输入货币数量，一个输入美元，一个输入人民币，还有一行提示文字例如：“我们有1美元，也就是6.9元”；要求两个输入框随意输入一个，另一个输入框会根据汇率自动显示转换后的货币数量，并且下方提示文字也跟随变化。</p>
<p>通常情况下，我们会编写一个用于输入货币数量的组件，然后在页面上放两个这样的组件：</p>
<pre><code class="javascript">const exchangeRate = 6.9339
const currency = {
  '$': '美元',
  '￥': '人民币'
}
class CurrencyInput extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
      value: ''
    }
    this.changeHandler = this.changeHandler.bind(this)
  }
  render () {
    return(
      &lt;div&gt;
        &lt;label&gt;
          {currency[this.props.currency]}：
          &lt;input value={this.state.value} onChange={this.changeHandler}/&gt;
        &lt;/label&gt;
      &lt;/div&gt;
    )
  }
  changeHandler (e) {
    this.setState({
      value: e.target.value
    })
  }
}
class App extends React.Component {
  constructor (props) {
    super(props)
  }
  render () {
    return(
      &lt;div&gt;
        &lt;CurrencyInput currency={'$'}/&gt;
        &lt;CurrencyInput currency={'￥'} /&gt;
        &lt;p&gt;我们有{}美元，也就是{}元&lt;/p&gt;
      &lt;/div&gt;
    )
  }
}

ReactDOM.render(
  &lt;App /&gt;,
  document.getElementById('root')
)</code></pre>
<p>在上面的代码中我们将货币种类通过<code>props</code>传递给输入框组件，分别显示了美元和人名币的输入框。然后在输入框组件内部，我们使用了上一节的“受控组件”技术，将输入框的值交由组件的<code>state</code>控制。但并没有完成需求——两个输入框并不同步，同时组件外部也不知道组件中到底填了什么值所以下面的提示语句也没有更新。</p>
<blockquote><p>很多时候，若干组件需要隐射同一个变化的状态。我们推荐将共享的状态提升至它们最近的共同的祖先上。</p></blockquote>
<p>就像官方推荐的那样，这时我们就需要用到共享状态提升技术：我们要将两个货币输入框组件共享的“数量”状态，提升到它们最近的祖先组件上，也就是<code>App</code>组件上。</p>
<pre><code class="javascript">// ...省略的代码
class CurrencyInput extends React.Component {
  constructor (props) {
    super(props)
    this.handleChange = this.handleChange.bind(this)
  }
  render () {
    return(
      &lt;div&gt;
        &lt;label&gt;
          {CURRENCY[this.props.currency]}：
          &lt;input value={this.props.value} onChange={this.handleChange}/&gt; // 需要传递额外参数的情况下只能再包一层
        &lt;/label&gt;
      &lt;/div&gt;
    )
  }
  handleChange (e) {
    this.props.onValueChange(e.target.value, this.props.currency) // 父级传递进来的回调函数
  }
}

class App extends React.Component {
  constructor (props) {
    super(props)
    this.state = { // 将共享状态存放在祖先元素上
      dollar: '',
      yuan: ''
    }
    this.valueChangeHandler = this.valueChangeHandler.bind(this)
  }
  render () {
    return( // 通过props向下传递共享状态和回调函数，很多情况下子组件共享的状态父级也需要用到
      &lt;div&gt;
        &lt;CurrencyInput value={this.state.dollar} currency={'$'} onValueChange={this.valueChangeHandler}/&gt;
        &lt;CurrencyInput value={this.state.yuan} currency={'￥'} onValueChange={this.valueChangeHandler}/&gt;
        &lt;p&gt;我们有{this.state.dollar}美元，也就是{this.state.yuan}元&lt;/p&gt;
      &lt;/div&gt;
    )
  }
  valueChangeHandler (value, type) {
    this.setState({
      dollar: type === '$' ? value : this.exchange(value, type),
      yuan: type === '￥' ? value : this.exchange(value, type)
    })
  }
  exchange (value, type) {
    return value * (type === '$' ? EXCHANGERATE : 1 / EXCHANGERATE)
  }
}
// ... 省略的代码</code></pre>
<p>其实不管是美元还是人民币，其实背后都只有一个数量，这个数量同时代表了一定数量的美元和一定数量的人民币，所以更好地，我们可以也应该只存放一个状态在父组件上，然后在渲染子组件时计算子组件的状态并传递给他们：</p>
<pre><code class="javascript">// ... 省略的代码
function exchange (value, type) { // 将转换函数放到全局以便子组件可以访问
  return value * (type === '$' ? EXCHANGERATE : 1 / EXCHANGERATE)
}

class CurrencyInput extends React.Component {
 // ... 省略的代码
  render () {
    // 子组件在渲染时自己计算自己的状态
    let currentCurrency = this.props.currentCurrency
    let currency = this.props.currency
    let value = ''
    if (currentCurrency.value !== '' &amp;&amp; !/^\s+$/g.test(currentCurrency.value)) {
      value = currentCurrency.type === currency ?
        currentCurrency.value : 
        exchange(currentCurrency.value, currentCurrency.type)
    }   
    return(
      &lt;div&gt;
        &lt;label&gt;
          {CURRENCY[currency]}：
          &lt;input value={value} onChange={this.handleChange}/&gt;
        &lt;/label&gt;
      &lt;/div&gt;
    )
  }
  // ... 省略的代码
}

class App extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
      currentCurrency: { // 存储一个值，这里具体做法时存储当前改变的值
        value: '',
        type: ''
      } 
    }
    this.valueChangeHandler = this.valueChangeHandler.bind(this)
  }
  render () {
    // 将共享的状态传递给组件，同时父组件需要的状态也自己计算出来
    return(
      &lt;div&gt;
        &lt;CurrencyInput
          currentCurrency={this.state.currentCurrency}
          currency={'$'}
          onValueChange={this.valueChangeHandler}/&gt;
        &lt;CurrencyInput
          currentCurrency={this.state.currentCurrency}
          currency={'￥'}
          onValueChange={this.valueChangeHandler}/&gt;
        &lt;p&gt;我们有{exchange(this.state.currentCurrency.value, '$')}美元，也就是{exchange(this.state.currentCurrency.value, '￥')}元&lt;/p&gt;
      &lt;/div&gt;
    )
  }
  valueChangeHandler (value, type) { // 这里只需要简单映射关系即可，不再需要计算各个组件的具体状态值
    this.setState({
      currentCurrency: { value, type }
    })
  }

}

ReactDOM.render(
  &lt;App /&gt;,
  document.getElementById('root')
)</code></pre>
<p>上面的例子很好地贯彻了React官方反复强调推荐的“单项数据流”模式。虽然多写了一些代码，但是好处是可以减少因为子组件可以自行修改共享状态而引起的一些bug，毕竟我们将共享状态提升到父级组件上以后，所有对共享状态的修改就都集中在父级组件上了。</p>
<p>另外，再次强调一个原则：<strong>任何可以由<code>state</code>或<code>props</code>计算出来的状态，都不应该放在<code>state</code>中</strong>。就像上例那样，应该直接在<code>render()</code>函数中直接计算后使用。</p>
<h3>12. 聚合而不是继承</h3>
<p>React官方推荐使用聚合而不是继承来在组件之间复用代码。通常有两种服用的情况，一种是组件的部分结构或内容不确定，需要由外部传入，这时组件就相当于一个容器；另一种是从更为抽象的组件创建一个较为具体的组件，比如“弹层”和“登陆弹层”。</p>
<h4>12.1 容器</h4>
<p>当组件内有部分内容不确定需要外部传入时，可以使用一个特殊的<code>props</code>属性<code>children</code>来传入。在组件内部访问<code>props.children</code>可以获取使用组件时写在组件开始和结束标签内的内容：</p>
<pre><code class="javascript">function FancyBorder(props) {
  return (
    &lt;div className={'FancyBorder FancyBorder-' + props.color}&gt;
      {props.children}
    &lt;/div&gt;
  );
}

function WelcomeDialog() {
  return (
    &lt;FancyBorder color="blue"&gt;
      &lt;h1 className="Dialog-title"&gt;
        Welcome
      &lt;/h1&gt;
      &lt;p className="Dialog-message"&gt;
        Thank you for visiting our spacecraft!
      &lt;/p&gt;
    &lt;/FancyBorder&gt;
  );
}</code></pre>
<p>当组件有多个部分内容不确定都需要外部传入时，单靠<code>props.children</code>就不能满足需求了。但时不要忘记React组件的<code>props</code>可以接受任意类型的参数，所以其实组件的内容也完全可以直接使用<code>props</code>来传递到组件内部：</p>
<pre><code class="javascript">function SplitPane(props) {
  return (
    &lt;div className="SplitPane"&gt;
      &lt;div className="SplitPane-left"&gt;
        {props.left}
      &lt;/div&gt;
      &lt;div className="SplitPane-right"&gt;
        {props.right}
      &lt;/div&gt;
    &lt;/div&gt;
  );
}

function App() { // JSX中使用{}插入另一个JSX，因为JSX也是表达式
  return &lt;SplitPane left={ &lt;Contacts /&gt; } right={ &lt;Chat /&gt; } /&gt;
}</code></pre>
<h4>12.2 具象化</h4>
<p>有时我们希望一个组件是另一个较为抽象的组件的特例（更为具象），官方推荐的做法是将抽象组件包裹在具象组件中，并使用<code>props</code>来配置它：</p>
<pre><code class="javascript">function Dialog(props) {
  return (
    &lt;FancyBorder color="blue"&gt;
      &lt;h1 className="Dialog-title"&gt;
        {props.title}
      &lt;/h1&gt;
      &lt;p className="Dialog-message"&gt;
        {props.message}
      &lt;/p&gt;
    &lt;/FancyBorder&gt;
  );
}

function WelcomeDialog() {
  return (
    &lt;Dialog
      title="Welcome"
      message="Thank you for visiting our spacecraft!" /&gt;
  );
}</code></pre>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;h3&gt;1. 安装&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;1.1 尝试&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;开始之前可以先去&lt;a href=&quot;http://codepen.io/gaearon/pen/rrpgNB?editors=0010&quot; target=&quot;_b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo优化插件</title>
    <link href="http://yoursite.com/2017/02/20/Hexo%E4%BC%98%E5%8C%96%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/02/20/Hexo优化插件/</id>
    <published>2017-02-20T08:34:29.000Z</published>
    <updated>2017-02-20T08:37:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><ul></ul></p>
<p><li>1.安装Hexo</li></p>
<p><li>2.部署Hexo</li></p>
<p><li>3.Hexo命令</li></p>
<p><li>4.一些报错处理</li></p>
<p><li>5.博客管理</li></p>
<p><li>6.插件（RSS、Sitemap）</li></p>
<p><li>7.评论设置</li></p>
<p><li>8.404页面</li></p>
<p><li>9.统计</li></p>
<p><li>10.更新</li></p>
<p><li>11.总结</li></p>
<p><li>12.参考引用</li></p>
<p><li>13.搭建博客相关网站</li><br></p>
<p></p><h3>简述</h3><p></p>
<p>本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌。</p><br><h4>1.安装Hexo</h4><br><pre><code> $ npm install -g hexo</code></pre><br><h6>坑1</h6><br><p>这里可能安装失败，可能权限不够，在命令前加<code>sudo</code></p><br><pre><code> $ sudo npm install -g hexo</code></pre><br><h4>2.部署Hexo</h4><br><pre><code> $ hexo init</code></pre><br><h6>注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。</h6><br><p>执行命令生，会在当前命令的路径下，生成以下文件：</p><br><pre><code>    .<br>    ├── .deploy<br>    ├── public<br>    ├── scaffolds<br>    ├── scripts<br>    ├── source<br>    |   ├── _drafts<br>    |   └── _posts<br>    ├── themes<br>    ├── _config.yml<br>    └── package.json</code></pre><br><ul><br><li>.deploy：执行hexo deploy命令部署到GitHub上的内容目录</li><br><li>public：执行hexo generate命令，输出的静态网页内容目录</li><br><li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li><br><li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li><br><li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</li><br><li>_drafts：草稿文章</li><br><li>_posts：发布文章</li><br><li>themes：主题文件目录</li><br><li>_config.yml：全局配置文件，大多数的设置都在这里</li><br><li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li><br></ul><br><h4>3.Hexo命令</h4><br><p>Hexo下，通过 <code>_config.yml</code> 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。</p><br><ul><br><li>全局设置</li><br></ul><br><p>在你博客目录下有一个文件名<code>_config.yml</code>，打开可以配置信息。</p><br><ul><br><li>局部页面</li><br></ul><br><p>在你博客目录下 <code>\themes\你使用的主题_config.yml</code> </p><br><ul><br><li>写博客相关命令</li><br></ul><br><pre><code>    Hexo常用命令：<br><br>    hexo new “postName”       #新建文章<br>    hexo new page “pageName”  #新建页面<br>    hexo generate             #生成静态页面至public目录<br>    hexo server               #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>    hexo deploy               #将.deploy目录部署到GitHub</code></pre><br><p>当然，如果每次输入那么长命令，那么一定想到用<strong>简写</strong>：</p><br><pre><code>    hexo n == hexo new<br>    hexo g == hexo generate<br>    hexo s == hexo server<br>    hexo d == hexo deploy</code></pre><br><p>其它的，还可以<strong>复合命令</strong>：</p><br><pre><code>    hexo deploy -g<br>    hexo server -g</code></pre><br><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧</p><br><pre><code>    $ hexo clean</code></pre><br><p>当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。</p><br><blockquote><p>注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？<br>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p></blockquote><br><h3>4.一些报错处理</h3><br><h6>坑2</h6><br><ul><br><li><br><p>一</p><br><blockquote><p>ERROR Plugin load failed: hexo-server<br>原因：<br>Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.<br>解决方法，执行命令：<br>sudo npm install hexo-server</p></blockquote><br></li><br><li><br><p>二</p><br><blockquote><p>执行命令hexo server，有如下提示：<br>Usage: hexo<br>….<br>原因：<br>我认为是没有生成本地服务<br>解决方法，执行命令：<br>npm install hexo-server –save<br>提示：hexo-server@0.1.2 node_modules/hexo-server</p></blockquote><br></li><br></ul><br><ul><br><li>三<blockquote><p>白板和Cannot GET / 几个字<br>原因:<br>由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p></blockquote><br></li><br></ul><br><pre><code>    npm install hexo-renderer-ejs –save<br>    npm install hexo-renderer-stylus –save<br>    npm install hexo-renderer-marked –save<br>    这个时候再重新生成静态文件，命令：<br>    hexo generate （或hexo g）<br>    启动本地服务器：<br>    hexo server （或hexo s）</code></pre><br><h4>5.博客管理</h4><br><p>上面命令中，其实生成文章，可以直接把写好的文章插入到目录<code>/_posts</code> 下面，后缀为.MD就行，在文章头部固定格式：</p><br><pre><code>    title: Mac提高使用效率的一些方法   #文章的标题，这个才是显示的文章标题，其实文件名不影响<br>    date: 2015-09-01 20:33:26      #用命令会自动生成，也可以自己写，所以文章时间可以改<br>    categories: technology         #文章的分类，这个可以自己定义<br>    tags: [Mac,效率,快捷方式]        #tag，为文章添加标签，方便搜索<br>    —</code></pre><br><p>当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用<a href="https://en.wikipedia.org/wiki/YAML" target="_blank">AML</a>来写的。</p><br><pre><code>    tags:<br>    - tag1<br>    - tag2</code></pre><br><p>如果在博客文章列表中，不想全文显示，可以增加 &lt;!–more–&gt;, 后面的内容就不会显示在列表。</p><br><pre><code>     &lt;!–more–&gt;</code></pre><br><h4>6.插件</h4><br><ul><br><li><br><p>安装插件</p><br><pre><code>  $ npm install &lt;plugin-name&gt; –save</code></pre><br></li><br><li><br><p>添加RSS</p><br><pre><code>  npm install hexo-generator-feed</code></pre><br><p>然后，到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！(楼主就是在这里被坑了次)<br>解决方法：</p><br><pre><code>  $ npm install hexo-generator-feed –save</code></pre><br><p>这个命令来自<a href="https://www.npmjs.com/package/hexo-generator-feed" target="_blank">hexo-generator-feed</a></p><br><pre><code>  Install<br>     $ npm install hexo-generator-feed –save<br>   Hexo 3: 1.x<br>   Hexo 2: 0.x<br>  Options<br>     You can configure this plugin in _config.yml.<br><br>    feed:<br>       type: atom<br>       path: atom.xml<br>       limit: 20<br><br>      type - Feed type. (atom/rss2)<br>      path - Feed path. (Default: atom.xml/rss2.xml)<br>      limit - Maximum number of posts in the feed (Use 0 or false to show all posts)</code></pre><br></li><br></ul><br><p>其中可以选择：<br>然后在 Hexo 根目录下的 _config.yml 里配置一下</p><br><pre><code>    feed:<br>        type: atom<br>        path: atom.xml<br>        limit: 20<br>    #type 表示类型, 是 atom 还是 rss2.<br>    #path 表示 Feed 路径<br>    #limit 最多多少篇最近文章</code></pre><br><p>最后，在 <code>hexo generate</code>之后，会发现public文件夹下多了atom.xml！</p><br><p>例如要订阅我的blog只要输入<code>ihtc.cc/atom</code>就可以搜寻到啦！</p><br><ul><br><li>添加Sitemap<blockquote><p>Sitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。</p></blockquote><br></li><br></ul><br><pre><code>    $ npm install hexo-generator-sitemap –save</code></pre><br><p>这个命令来自<a href="https://www.npmjs.com/package/hexo-generator-sitemap" target="_blank">hexo-generator-sitemap</a></p><br><pre><code>    Install<br>        $ npm install hexo-generator-sitemap –save<br><br>        Hexo 3: 1.x<br>        Hexo 2: 0.x<br>    Options<br>        You can configure this plugin in _config.yml.<br><br>        sitemap:<br>            path: sitemap.xml<br>        path - Sitemap path. (Default: sitemap.xml)</code></pre><br><p>同样可以选择：<br>在 Hexo 根目录下的 _config.yml 里配置一下</p><br><pre><code>        sitemap:<br>           path: sitemap.xml<br>           #path 表示 Sitemap 的路径. 默认为 sitemap.xml.</code></pre><br><p>对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的. 安装</p><br><pre><code>        $ npm install hexo-generator-baidu-sitemap –save</code></pre><br><p>然后在 Hexo 根目录下的 _config.yml 里配置一下</p><br><pre><code>       baidusitemap:<br>            path: baidusitemap.xml</code></pre><br><p>为了博客有更好的展示率, 最好的方式是通过搜索引擎, 提交 Sitemap文件是一个方式，具体可参考：</p><br><ul><br><li><a href="http://lukang.me/2015/optimization-of-hexo-2.html" target="_blank">Hexo 优化与定制(二) | Kang Lu’s Blog</a></li><br><li><br><p><a href="http://fionat.github.io/blog/2013/10/23/sitemap/" target="_blank">｜Hexo优化｜如何向google提交sitemap（详细） | Fiona’s Blog</a></p><br></li><br><li><br><p>其它插件<br><a href="https://github.com/hexojs/hexo/wiki/Plugins" target="_blank">Plugins · hexojs/hexo</a></p><br></li><br></ul><br><h4>7.评论设置</h4><br><p>在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的<a href="http://duoshuo.com" target="_blank">多说</a>评论系统。</p><br><p>需要说明的是 <code>short_name:</code>字段，这个字段为你多说填写的站点名字，比如我的域名：ihtcboy.duoshuo.com，那么我的short_name:”ihtcboy”</p><br><h4>8.404页面</h4><br><blockquote><p>GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。<br>其实，404页面可以做更多有意义的事，来做个404公益项目吧。</p></blockquote><br><p>腾讯公益 404.html :</p><br><pre><code>    &lt;html&gt;<br>    &lt;head&gt;<br>        &lt;meta charset=”UTF-8”&gt;<br>        &lt;title&gt;404&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>    &lt;br&gt;&lt;!–<br>    &lt;!DOCTYPE HTML&gt;<br>    &lt;html&gt;<br>    &lt;head&gt;<br>        &lt;meta charset=”UTF-8” /&gt;<br>        &lt;title&gt;公益404 | 不如&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>    #404 Not found By Bruce<br>    &lt;h1&gt;404 Page Not Found&lt;/h1&gt;<br>    –&gt;&lt;br&gt;&lt;script type=”text/javascript” src=”<a href="http://www.qq.com/404/search_children.js" target="_blank" rel="external">http://www.qq.com/404/search_children.js</a>“ charset=”utf-8”&gt;&lt;/script&gt;&lt;br&gt;&lt;!–<br>    公益404介接入地址<br>    益云公益404 <a href="http://yibo.iyiyun.com/Index/web404" target="_blank" rel="external">http://yibo.iyiyun.com/Index/web404</a><br>    腾讯公益404 <a href="http://www.qq.com/404" target="_blank" rel="external">http://www.qq.com/404</a><br>    失蹤兒童少年資料管理中心404 <a href="http://404page.missingkids.org.tw" target="_blank" rel="external">http://404page.missingkids.org.tw</a><br>    –&gt;<br>    &lt;br&gt;<br>    &lt;/body&gt;<br>    &lt;/html&gt;</code></pre><br><p>复制上面代码，贴粘到目录下新建的404.html即可！</p><br><h4>9.统计</h4><br><blockquote><p>因Google Analytics偶尔被墙，故国内用百度统计</p></blockquote><br><p>最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：<a href="http://service.ibruce.info" target="_blank">不蒜子</a><br>本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考不蒜子文档中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。</p><br><ul><br><li><a href="http://ibruce.info/2013/12/22/count-views-of-hexo/" target="_blank">为hexo博客添加访问次数统计功能 | 不如</a></li><br></ul><br><h4>10.更新</h4><br><ul><br><li>更新hexo：<pre><code>  npm update -g hexo</code></pre><br></li><br><li>更新主题：<pre><code>  cd themes/你的主题<br>  git pull</code></pre><br></li><br><li>更新插件：<pre><code>  npm update</code></pre><br></li><br></ul><br><h4>11.总结</h4><br><p>本文主要是解释了自己搭建过程中遇到的问题，还有综合了其它Hexo教程的总结，还有图床、搜索、CDN加速等内容没有说到，大家用到可以自行百度谷歌！</p><br><h3>12.参考引用</h3><br><p><a href="http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/" target="_blank">如何搭建一个独立博客——简明Github Pages与Hexo教程</a><br><a href="http://zipperary.com/2013/05/28/hexo-guide-1/" target="_blank">hexo系列教程：（一）hexo介绍 | Zippera’s blog</a><br><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank">hexo系列教程：（二）搭建hexo博客 | Zippera’s blog</a><br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank">hexo你的博客 | 不如</a><br><a href="http://yangjian.me/workspace/building-blog-with-hexo/" target="_blank">使用hexo搭建博客 | Alimon’s Blog</a><br><a href="http://blog.sunnyxx.com/2014/02/27/hexo_startup/" target="_blank">hexo边搭边记 | sunnyxx的技术博客</a><br><a href="http://code.wileam.com/build-a-hexo-blog-and-optimize/" target="_blank">hexo搭建静态博客以及优化 | Joanna’s coding blog</a><br><a href="http://www.jianshu.com/p/465830080ea9/comments/550752#comment-550752" target="_blank">HEXO+Github,搭建属于自己的博客 - 简书</a><br><a href="http://code.kpman.cc/2013/05/08/%E5%9C%A8hexo%E8%87%AA%E8%A8%82rss/" target="_blank">在hexo自訂rss | kpman | code</a><br><a href="http://michaelhsu.tw/2013/05/05/rssatom-sitemap-for-seo/" target="_blank">RSS/Atom、Sitemap for SEO | Michael Hsu.tw</a><br><a href="http://lukang.me/2015/optimization-of-hexo-2.html" target="_blank">Hexo 优化与定制(二) | Kang Lu’s Blog</a><br><a href="http://ijiaober.github.io/categories/hexo/" target="_blank">Hexo | { GoonX }</a><br><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank">不蒜子 | 不如</a></p>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;1.安装Hexo&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;2.部署Hexo&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;3.Hexo命令&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;4.一些报错处理&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;5.博客管理&lt;/li&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My Gallery</title>
    <link href="http://yoursite.com/2017/02/20/My-Gallery/"/>
    <id>http://yoursite.com/2017/02/20/My-Gallery/</id>
    <published>2017-02-20T07:57:33.000Z</published>
    <updated>2017-02-20T08:02:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/02/20/My-Gallery/saber.jpg" alt="saber"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/02/20/My-Gallery/saber.jpg&quot; alt=&quot;saber&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试2</title>
    <link href="http://yoursite.com/2017/02/20/%E6%B5%8B%E8%AF%952/"/>
    <id>http://yoursite.com/2017/02/20/测试2/</id>
    <published>2017-02-20T07:56:27.000Z</published>
    <updated>2017-02-20T07:56:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>终于搭建完了</title>
    <link href="http://yoursite.com/2017/02/19/%E7%BB%88%E4%BA%8E%E6%90%AD%E5%BB%BA%E5%AE%8C%E4%BA%86/"/>
    <id>http://yoursite.com/2017/02/19/终于搭建完了/</id>
    <published>2017-02-19T11:22:23.000Z</published>
    <updated>2017-02-19T11:22:23.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/02/19/hello-world/"/>
    <id>http://yoursite.com/2017/02/19/hello-world/</id>
    <published>2017-02-19T10:55:15.000Z</published>
    <updated>2017-02-19T10:55:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[Object Oriented Programing]</title>
    <link href="http://yoursite.com/2016/12/22/Object%20Oriented%20Programing/"/>
    <id>http://yoursite.com/2016/12/22/Object Oriented Programing/</id>
    <published>2016-12-22T12:21:04.000Z</published>
    <updated>2017-02-22T12:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object-Oriented-Programing"><a href="#Object-Oriented-Programing" class="headerlink" title="Object Oriented Programing"></a>Object Oriented Programing</h1><h2 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h2><ul>
<li>throw “抛出异常”<br>  <code>throw new TypeError(&#39;&quot;this&quot; is null or not defined&#39;);</code></li>
<li><p>“use strict” </p>
<ul>
<li>全部小写,整个字符串是个字符,不能随便添加空格,可以单引号</li>
<li>作用域,在函数内部(顶部), <code>&lt;script&gt;</code> 标签内(相互独立)</li>
</ul>
</li>
<li><p>反括号  var str =  <code>字符串</code> 处理参数过长</p>
</li>
<li><p>== 判断值 === 判断值和类型  若为引用类型, 则判断 地址</p>
</li>
<li><p>with<br>with(对象){对象的作用域,this指向window}省略前缀<br>添加属性,会添加到window上</p>
</li>
<li><p>静态方法: 只能通过 构造函数.方法 来调, this 指向构造函数</p>
</li>
<li><p>动态方法: 添加到原型上的方法,实例调 </p>
</li>
<li><p>str = JSON.stringify(arr)</p>
</li>
<li><p>typeof 都是小写</p>
</li>
<li><p>伪数组 转 真数组<br>  [].push.apply()<br>  ({}).slice.call()  //兼容ie</p>
</li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>私有变量和函数</strong></p>
<pre><code>定义在构造函数内部而被this对象的变量,在外部无法访问到的变量和函数
</code></pre><p><strong>公有变量和方法</strong></p>
<pre><code>对外暴露接口,可以通过构造函数对象创建的对象访问的属性和方法
</code></pre><p><strong>代码示例</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">type,number</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;   <span class="comment">//公共的属性</span></div><div class="line">        <span class="keyword">this</span>.number = number;</div><div class="line">        <span class="keyword">var</span> city = <span class="string">"广州"</span>;                <span class="comment">//私有变量</span></div><div class="line">        <span class="keyword">var</span> getNumber = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;       <span class="comment">//私有函数</span></div><div class="line">            <span class="keyword">return</span> number;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> getType = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> type;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">//能够访问私有变量和函数的方法 --- 特权方法</span></div><div class="line">        <span class="keyword">this</span>.getDescription = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(getNumber() + getType() + city);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">"汽车"</span>,<span class="string">"201718"</span>);</div><div class="line">    car.getDescription();</div></pre></td></tr></table></figure>
<ul>
<li>prototype (object类型) 是function自带的属性,有一个constructor属性指向该函数,object没有该属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> Object.property中的属性和方法</div><div class="line"></div><div class="line">① constructor 指向原型相关联的构造函数，为Object</div><div class="line">② hasOwnProperty 判断对象中是否拥有某个实例属性(不包括原型链上面的属性)</div><div class="line">    - hasOwnProperty</div><div class="line">    - 对象.hasOwnProperty(&quot;属性&quot;)</div><div class="line">    - 类似in,但是原型对象中的属性不算</div><div class="line">③ isPrototypeOf  校验某个对象是否是指定对象的原型对象(整条原型链)</div><div class="line">④ propertyIsEnumerable 属性是否存在且可枚举(使用for循环可以遍历,即目标属性能否在for循环中显示出来)</div><div class="line">⑤ toString() 返回一个描述目标对象的字符串,对象则返回[object object]</div><div class="line">    Object.prototype.toString.call(被检测的参数如 arr) [object Array]</div><div class="line">   toString(参数) 参数出可以传入一个用于进制数的参数,该参数的默认值为10(主要针对Number类型有效)</div><div class="line">⑥ toLocaleString 同toString,但是会做一些本地化的处理。</div><div class="line">⑦ valueOf() 返回指定对象的原始值</div><div class="line">             如果该对象有 基本数据类型的值,则返回该值,</div><div class="line">             如果没有则返回this本身。</div><div class="line">             Date对象调用该方法会返回一个时间戳。</div></pre></td></tr></table></figure>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul>
<li><p>Object.getPrototypeOf(object) 返回obj的原型  ==&gt; 构造函数的原型属性</p>
</li>
<li><p>break 停止循环 continue 跳过当前 进行下次</p>
</li>
<li><p>delete 关键字</p>
<ul>
<li>删除对象的属性</li>
<li>删除没用var 声明的对象</li>
<li>delete 属性屏蔽 -&gt;访问原型中的属性.就相当于 实例.prototype.属性</li>
</ul>
</li>
<li><p>in关键字 </p>
<ul>
<li>在判断属性是否存在于对象中时,key 是字符串,需要加双引号</li>
<li>in 操作array数组时 操作的是索引值 (1 in arrar) </li>
<li>原型对象上的属性也会被枚举</li>
</ul>
</li>
<li><p>instanceOf </p>
<ul>
<li>对象  instanceOf  构造函数/具体类型   </li>
<li>实例在原型链上就是,对应构造函数的实例 </li>
</ul>
</li>
<li><p>对象.constructor</p>
<ul>
<li>(实例的constructor 来自原型对象的constructor 共同指向 构造函数)</li>
<li>constructor 一定指向构造函数</li>
</ul>
</li>
</ul>
<ul>
<li><p>修改原型中的属性 </p>
<ul>
<li>对象.属性 无法操作原型对象中的属性和方法</li>
<li>对象.属性(对象).属性 可以修改原型对象的属性(对象)的属性</li>
</ul>
</li>
<li><p>null 变量的值不会为null,除非手动设置</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 函数参数是按值传递 </div><div class="line">/*如果形参名称 和 全局变量一样时 就近原则 选择num 为形参*/</div><div class="line">var num = 10;</div><div class="line">function fn(num) &#123;</div><div class="line">    num =5;          // 此时修改的为形参, 而全局变量num 没有被修改</div><div class="line">    console.log(num); //num = 5</div><div class="line">&#125;</div><div class="line">fn(num);</div><div class="line">console.log(num);  // num =10</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    num =<span class="number">5</span>;         <span class="comment">// 此时num 为 全局变量 被修改</span></div><div class="line">    <span class="built_in">console</span>.log(n); <span class="comment">//num = 5</span></div><div class="line">&#125;</div><div class="line">fn(num);</div><div class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// num = 5</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>Fun 和 Obj</p>
<p><img src="/2016/12/22/Object Oriented Programing/oop1.png" alt="oop1-w600"></p>
<p><img src="/2016/12/22/Object Oriented Programing/oop2.png" alt="oop2-w600"></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul>
<li>实现 o 继承 tmp 对象 (ECMA5方法)<ul>
<li><code>var o = Object.creat(tmp)</code> </li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;name =<span class="string">"名称"</span>&#125;;</div><div class="line"><span class="keyword">var</span> o = &#123;&#125;</div><div class="line"><span class="comment">// 单个实例实现继承</span></div><div class="line">o.__proto__ = obj;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.name = <span class="string">"名字"</span>;     <span class="comment">//先创建包装类型,执行完后,对象销毁</span></div><div class="line"><span class="built_in">console</span>.log(str.name)   <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<ol>
<li>属性 通过call传递  B继承了A的属性</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function B&#123;</div><div class="line">   A.call(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>遍历传递方法 (若直接赋值传递,是引用了相同的内存对象)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var i in A.prototype)&#123;</div><div class="line">    B.prototype[i]=A.prototype[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>封闭空间</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//1</div><div class="line">(function () &#123;</div><div class="line"></div><div class="line">&#125;)();</div><div class="line">//</div><div class="line">(function () &#123;</div><div class="line"></div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<ul>
<li><p>caller 返回函数调用者</p>
<ul>
<li>场景 主要用于察看函数本身被哪个函数调用</li>
</ul>
</li>
<li><p>callee</p>
<ul>
<li>返回正被执行的 Function 对象，也就是所指定的 Function 对象的正文.</li>
<li>callee是arguments 的一个属性成员，它表示对函数对象本身的引用</li>
<li>arguments.callee.length可以获取实参参数</li>
</ul>
</li>
</ul>
<ul>
<li><p>call </p>
<ul>
<li>供爷法则:<figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- 作用:将 &quot;爷&quot; 中的this指针 改为 &quot;你&quot;</div><div class="line">- 1 将伪数组</div><div class="line">(document.getbytagname()  arguments $(&apos;.class&apos;))</div><div class="line">转换成真数组</div><div class="line">`Array.prototype.slice.call(fackArray);`</div><div class="line">`[].push.apply([],fackArray)`</div><div class="line">真数组转 伪数组</div><div class="line">[].push.apply(fackArray,arr);</div><div class="line">- 2 判断类型:  </div><div class="line">  ```tostring.call(123)     [object number]</div></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>apply</p>
<ul>
<li>和call一样,参数是数组</li>
<li>apply应用 ,保留this指向</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//因为document.getElementById方法的内部实现中需要使用到this,这个this本来期望指向的是document对象</span></div><div class="line"><span class="comment">//当我们以document.getElementById来调用的时候,内部的this指向document对象</span></div><div class="line"><span class="comment">//但是当我们以getId的方式调用的时候,内部的this指向的是window对象(因为我们以普通的方式进行调用)</span></div><div class="line"></div><div class="line"> <span class="comment">//借用apply来修正this</span></div><div class="line"><span class="built_in">document</span>.getElementById = (<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> func.apply(<span class="built_in">document</span>,<span class="built_in">arguments</span>);</div><div class="line">   &#125;</div><div class="line">&#125;)(<span class="built_in">document</span>.getElementById);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById;</div><div class="line"><span class="keyword">var</span> div = getId(<span class="string">'demo'</span>);        <span class="comment">//会报错?</span></div><div class="line"><span class="built_in">console</span>.log(div);</div></pre></td></tr></table></figure>
<h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型:"></a>判断类型:</h3><ul>
<li>tostring.call(123)     [object number]</li>
<li>[]是不是Array的一个实例</li>
<li><code>[] instanceof Array</code></li>
<li><code>[].constructor === Array</code></li>
<li>typeof (关键字) 返回值为字符串<br> <code>if(typeof fn == &#39;Function&#39;){}</code></li>
</ul>
<h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1 拼接字符串</span></div><div class="line"><span class="keyword">var</span> arr1  = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr1.push.apply(arr1,arr2);</div><div class="line"></div><div class="line"><span class="comment">// 2 求数组中的最大值</span></div><div class="line"><span class="comment">//(Max只能接受离散值) 这里先转换为 Math.max.call(null,3,4,5);</span></div><div class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr2);</div></pre></td></tr></table></figure>
<ul>
<li><p>format</p>
</li>
<li><p>拼接 template 模板 绑定集合</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> &lt;!--模板王者演示--&gt;</div><div class="line">&lt;script id="arttemplate" type="text/html"&gt;</div><div class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &#123;&#123;each films&#125;&#125;</div><div class="line">            &lt;li&gt;</div><div class="line">                &lt;strong&gt;电影名称：&lt;/strong&gt;&#123;&#123;$value.title&#125;&#125;&lt;br&gt;</div><div class="line">                &lt;strong style='color:red'&gt;导演&lt;/strong&gt;&#123;&#123;$value.lead&#125;&#125;</div><div class="line">                &lt;strong style='color:green'&gt;主演:&lt;/strong&gt;&#123;&#123;$value.role&#125;&#125;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &#123;&#123;/each&#125;&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
<p>###字符串:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">接近数组: concat拼接, indexOf , charAt(index)返回特定位置的字符 </div><div class="line">return 'cat'.charAt(1); // returns "a"</div><div class="line">return 'cat'[1]; // returns "a"</div><div class="line">substr (fromIndex, length)  //删除的长度 </div><div class="line">substring(startIndex, endIndex)  //删除截止到</div><div class="line">slice(startIndex, endIndex) </div><div class="line">slice可对数组操作，substring不行</div><div class="line">    </div><div class="line">###字符串 -&gt; 数组 split()分割  *带p的 常用</div><div class="line">按给定字符串分割，返回分割后的多个字符串组成的字符串数组。</div><div class="line">    </div><div class="line">String.prototype.trim()</div><div class="line">从字符串的开始和结尾去除空格。参照部分 ECMAScript 5 标准。</div><div class="line">```  </div><div class="line"></div><div class="line">### 数组:</div><div class="line"></div><div class="line">```Js</div><div class="line">组合记忆 shift unshift pop push</div><div class="line">接近符串: 合并concat ,indexOf()返回索引, </div><div class="line"></div><div class="line">slice(start, end) 数组截取 ,若不传值,则复制一份返回</div><div class="line"></div><div class="line">//创建一个数组的复制</div><div class="line">var shallowCopy = fruits.slice(); </div><div class="line"></div><div class="line">数组 -&gt; 字符串  join(separator) 数组拼接成字符串</div><div class="line"></div><div class="line">###splice  *带p的 常用 </div><div class="line">        splice(start, deleteCount, val1, val2,...) </div><div class="line">        从start位置开始删除,删除deleteCount个,添加val1,val2</div><div class="line"></div><div class="line"></div><div class="line">// ECMA5  </div><div class="line">0.</div><div class="line">var fruits =["apple","banana"]</div><div class="line">fruits.forEach(function (item, index, array) &#123; //遍历</div><div class="line">  console.log(item, index); // Apple 0   Banana 1</div><div class="line">&#125;);</div><div class="line"></div><div class="line">1.</div><div class="line">arr.every(callback[, thisArg]) //不改变原数组,多用来判断</div><div class="line">callback  用来测试每个元素的函数。</div><div class="line">thisArg   执行 callback 时使用的 this 值。</div><div class="line"></div><div class="line">2.</div><div class="line">array.map() 方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。</div><div class="line"></div><div class="line">array.map(callback[, thisArg])</div><div class="line"></div><div class="line">callback 原数组中的元素经过该方法后返回一个新的元素。</div><div class="line">currentValue   callback 的第一个参数，数组中当前被传递的元素。</div><div class="line">index          callback 的第二个参数，数组中当前被传递的元素的索引。</div><div class="line">array          callback 的第三个参数，调用 map 方法的数组。</div><div class="line">thisArg        执行 callback 函数时 this 指向的对象。</div><div class="line"></div><div class="line">常用方法:</div><div class="line">000. 示例</div><div class="line">array.map(function(currentValue, index, array)&#123;</div><div class="line">    </div><div class="line">&#125;)</div><div class="line"></div><div class="line">001. 返回数组各值的平方根</div><div class="line">var numbers = [1, 4, 9];</div><div class="line">var roots = numbers.map(Math.sqrt);</div><div class="line">/* roots的值为[1, 2, 3], numbers的值仍为[1, 4, 9] */</div><div class="line"></div><div class="line">002. 返回数组对应ASCII</div><div class="line">var map = Array.prototype.map</div><div class="line">var a = map.call("Hello World", function(x) &#123; </div><div class="line">  return x.charCodeAt(0); </div><div class="line">&#125;)</div><div class="line"></div><div class="line">3.</div><div class="line">Array.isArray()</div><div class="line">假如一个变量是数组则返回true，否则返回false。</div><div class="line"></div><div class="line">4.</div><div class="line">Array.prototype.toString()</div><div class="line">返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 </div><div class="line">Object.prototype.toString() 方法。</div><div class="line"></div><div class="line">5. //待定</div><div class="line">Array.from() </div><div class="line">从类(伪)数组或者迭代对象（iterable object）中创建一个新的数组实例。</div><div class="line"></div><div class="line">Array.from(arrayLike[, mapFn[, thisArg]])</div><div class="line">arrayLike  想要转换成真实数组的类数组对象或可遍历对象。</div><div class="line">mapFn   可选参数，如果指定了该参数，则最后生成的数组会经过该函数的加工处理后再返回。</div><div class="line">thisArg  可选参数，执行 mapFn 函数时 this 的值。</div><div class="line"></div><div class="line">6. 数组 转 字符串</div><div class="line">str = JSON.stringify(array)  </div><div class="line">//将JavaScript值转换为JSON字符串</div><div class="line">// JSON 序列化</div></pre></td></tr></table></figure>
<p>###new 的原理</p>
<ul>
<li>先开辟一个内存空间,先创建一个新的空对象 </li>
<li>把this 指向这个空对象,拷贝函数中的属性和方法</li>
<li>把空对象的 <em>proto</em> 指向 构造函数内部 原型对象 prototype</li>
<li>构造函数执行完成后如果没有 return 把这个新对象返回,(return的是基本数据类型和null,依然返回原对象,因为指针依然指向原对象)</li>
</ul>
<p>实例拷贝原理:<br>实例化的时候,都会将构造函数的属性拷贝一份(包括隐藏属性),同时赋给新值,因为有的构造函数有默认值,就会讲内存空间替换掉</p>
<p>构造函数:<br>return {}. 代替原对象<br>return ‘jacket’ 返回原对象</p>
<p>定义一个构造函数 是不分配内存的<br>只有实例化的时候 才分配内存</p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> 例题<span class="number">1</span>:</div><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</div><div class="line">b = a;</div><div class="line">a.x = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(b.x);  <span class="comment">//2</span></div><div class="line">a = &#123;<span class="attr">x</span>:<span class="number">3</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(b.x);  <span class="comment">//2</span></div><div class="line"></div><div class="line">例题<span class="number">2</span>:</div><div class="line"> <span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">var</span> b = a;</div><div class="line">    a.x = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;  </div><div class="line">    <span class="built_in">console</span>.log(a.x);  <span class="comment">// undefined</span></div><div class="line">    <span class="built_in">console</span>.log(b.x);  <span class="comment">// &#123;n:2&#125;</span></div><div class="line">    <span class="built_in">console</span>.log(a);    <span class="comment">// &#123;n:2&#125;</span></div><div class="line">    <span class="built_in">console</span>.log(b)     <span class="comment">// &#123;n:1,x:&#123;n:2&#125;</span></div><div class="line">    </div><div class="line"> <span class="comment">/*</span></div><div class="line">  根据优先级 a.x -&gt; 给原&#123;n:1&#125;对象 添加一个x属性 undefined,</div><div class="line">  根据 赋值运算从右往左, </div><div class="line">  a=&#123;n:2&#125; -&gt; a 指向一个新对象&#123;n:2&#125;,</div><div class="line">  a.x = a -&gt; &#123;n:1&#125;.x 指向 &#123;n:2&#125;</div><div class="line">  */</div></pre></td></tr></table></figure>
<h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj1,obj2</span>) </span>&#123;</div><div class="line">obj2 = obj2 || &#123;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj1)</div><div class="line">&#123;</div><div class="line">  <span class="comment">//判断是否是实例属性</span></div><div class="line">  <span class="keyword">if</span>(obj1.hasOwnProperty(i))</div><div class="line">  &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj1[i] == <span class="string">'object'</span>)</div><div class="line">      &#123;</div><div class="line">          obj2[i] = <span class="built_in">Array</span>.isArray(obj1[i])?[]:&#123;&#125;;</div><div class="line">          <span class="comment">// 先创建一个空对象,来接收对象</span></div><div class="line">          deepCopy(obj1[i],obj2[i]); <span class="comment">//函数的调用(实参的值赋值给形参)</span></div><div class="line">      &#125;<span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">          <span class="comment">//基础数据类型</span></div><div class="line">          obj2[i] = obj1[i];</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">deepCopy(obj,obj2);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Object-Oriented-Programing&quot;&gt;&lt;a href=&quot;#Object-Oriented-Programing&quot; class=&quot;headerlink&quot; title=&quot;Object Oriented Programing&quot;&gt;&lt;/a&gt;Object O
    
    </summary>
    
    
  </entry>
  
</feed>
